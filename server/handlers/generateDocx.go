package handlers

import (
	"context"
	"fmt"

	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

func GenerateDocx(input, apiKey string) (genai.Part, error) {
	ctx := context.Background()

	if apiKey == "" {
		return nil, fmt.Errorf("API key is required")
	}

	client, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		return nil, fmt.Errorf("failed to create client: %v", err)
	}
	defer client.Close()

	model := client.GenerativeModel("gemini-2.0-flash-exp")

	model.SetTemperature(1)
	model.SetTopK(40)
	model.SetTopP(0.95)
	model.SetMaxOutputTokens(8192)
	model.ResponseMIMEType = "text/plain"

	session := model.StartChat()
	session.History = []*genai.Content{
		{
			Role: "user",
			Parts: []genai.Part{
				genai.Text("You are an expert backend API documentation writer, specializing in creating concise, well-structured, and developer-friendly documentation. When provided with the **source code in JSON format**, your task is to analyze it and write clear backend API documentation in the following format:\n\n---\n\n### Documentation Format:\n- **Route**: {API endpoint route with method here}  \n- **Response**: Include the API response format in JSON, specifying relevant fields and respective status codes.  \n- **Summary**: Provide a short and precise summary describing the purpose and functionality of the API endpoint.  \n\n---\n\n### Example:\n- **Route**: GET /users  \n- **Response**:  \n```json\n{\n    \"status\": 200,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"John Doe\",\n            \"email\": \"johndoe@example.com\"\n        }\n    ]\n}\n```\n- **Summary**: Fetches and returns a list of all users.\n\n---\n\n### Input Format:\nYou will receive the source code as a JSON object in the following structure:\n```json\n{\n    \"data\": {\n        \"fileNameWithExtension\": [\"string\"]\n    }\n}\n```\n\n### Your Task:\n1. Analyze the provided JSON source code file(s) based on the details given in the `fileNameWithExtension` array.  \n2. Extract all relevant **API routes**, **response structures**, and their corresponding **functional summaries**.  \n3. Generate the documentation, ensuring clarity and developer usability and well formatted for better readability.\n\n##Note for you:\n**Do not write any comments like \"I have understood the code and generated the documentation. Let me know if you want any changes\". Straight up write the documentation, that's it**\n\n--- "),
			},
		},
		{
			Role: "model",
			Parts: []genai.Part{
				genai.Text("```json\n{\n    \"data\": {\n        \"api.py\": [\n            \"from flask import Flask, request, jsonify\",\n            \"import uuid\",\n            \"\",\n            \"app = Flask(__name__)\",\n            \"\",\n            \"stores = {}\",\n            \"\",\n            \"@app.route('/store', methods=['POST'])\",\n            \"def create_store():\",\n            \"   data = request.get_json()\",\n            \"   store_id = uuid.uuid4().hex\",\n            \"   new_store = {\",\n            \"       'id': store_id,\",\n            \"       'name': data['name'],\",\n            \"       'items': []\",\n            \"   }\",\n            \"   stores[store_id] = new_store\",\n            \"   return jsonify(new_store), 201\",\n            \"\",\n            \"@app.route('/store/<string:store_id>', methods=['GET'])\",\n            \"def get_store(store_id):\",\n            \"   if store_id not in stores:\",\n            \"       return jsonify({'message': 'Store not found'}), 404\",\n            \"   return jsonify(stores[store_id]), 200\",\n            \"\",\n           \"@app.route('/store', methods=['GET'])\",\n           \"def get_all_stores():\",\n           \"   return jsonify(list(stores.values())), 200\",\n            \"\",\n            \"@app.route('/store/<string:store_id>/item', methods=['POST'])\",\n            \"def create_item(store_id):\",\n            \"   if store_id not in stores:\",\n            \"       return jsonify({'message': 'Store not found'}), 404\",\n            \"   data = request.get_json()\",\n            \"   new_item = {\",\n            \"       'name': data['name'],\",\n            \"       'price': data['price']\",\n            \"   }\",\n            \"   stores[store_id]['items'].append(new_item)\",\n            \"   return jsonify(new_item), 201\",\n             \"\",\n            \"@app.route('/store/<string:store_id>/item', methods=['GET'])\",\n            \"def get_all_items_in_store(store_id):\",\n            \"    if store_id not in stores:\",\n            \"        return jsonify({'message': 'Store not found'}), 404\",\n            \"    return jsonify(stores[store_id]['items']), 200\",\n            \"\",\n            \"if __name__ == '__main__':\",\n            \"    app.run(debug=True)\"\n        ]\n    }\n}\n```\n### Documentation:\n- **Route**: POST /store\n- **Response**:\n```json\n{\n    \"id\": \"unique_store_id\",\n    \"name\": \"store_name\",\n    \"items\": []\n}\n```\nStatus Code: 201\n- **Summary**: Creates a new store with a unique ID and given name, returns the newly created store details.\n\n- **Route**: GET /store/\\<string:store_id\\>\n- **Response**:\n```json\n{\n    \"id\": \"store_id\",\n    \"name\": \"store_name\",\n    \"items\": [\n        {\n            \"name\": \"item_name\",\n            \"price\": 10.00\n        }\n    ]\n}\n```\nStatus Code: 200,\n```json\n{\n    \"message\": \"Store not found\"\n}\n```\nStatus Code: 404\n- **Summary**: Retrieves and returns the details of a specific store using its ID. Returns a 404 if not found.\n\n- **Route**: GET /store\n- **Response**:\n```json\n[\n    {\n        \"id\": \"store_id\",\n        \"name\": \"store_name\",\n        \"items\": [\n            {\n                \"name\": \"item_name\",\n                \"price\": 10.00\n            }\n        ]\n    }\n]\n```\nStatus Code: 200\n- **Summary**: Retrieves and returns a list of all stores.\n\n- **Route**: POST /store/\\<string:store_id\\>/item\n- **Response**:\n```json\n{\n    \"name\": \"item_name\",\n    \"price\": 10.00\n}\n```\nStatus Code: 201,\n```json\n{\n    \"message\": \"Store not found\"\n}\n```\nStatus Code: 404\n- **Summary**: Adds a new item to a specific store given its ID. Returns the newly created item, or 404 if the store is not found.\n\n- **Route**: GET /store/\\<string:store_id\\>/item\n- **Response**:\n```json\n[\n    {\n        \"name\": \"item_name\",\n        \"price\": 10.00\n    }\n]\n```\nStatus Code: 200,\n```json\n{\n    \"message\": \"Store not found\"\n}\n```\nStatus Code: 404\n- **Summary**: Retrieves and returns a list of all items from a specific store, returns a 404 if store is not found.\n"),
			},
		},
		{
			Role: "user",
			Parts: []genai.Part{
				genai.Text("{\n    \"data\": {\n        \"backend/LocalAuth.js\": [\n            \"const LocalStrategy = require(\\\"passport-local\\\").Strategy;\\nconst UserModel = require(\\\"./models/User\\\");\\n\\nexports.initializePassport = (passport) => {\\n  passport.use(\\n    new LocalStrategy(async (username, password, done) => {\\n      const user = await UserModel.findOne({ username });\\n\\n      if (!user) return done(null, false);\\n\\n      if (user.password !== password) return done(null, false);\\n\\n      return done(null, user);\\n    })\\n  );\\n\\n  passport.serializeUser((user, done) => {\\n    done(null, user.i\",\n            \"d);\\n  });\\n\\n  passport.deserializeUser((id, done) => {\\n    const user = UserModel.find(u => u.id === id);\\n    done(null, user);\\n  });\\n};\\n\\n\"\n        ],\n        \"backend/Oauth.js\": [\n            \"// const GoogleStrategy = require(\\\"passport-google-oauth20\\\").Strategy;\\n// const GoogleUsers = require(\\\"./models/GoogleUsers\\\");\\n// const Users = require(\\\"./models/GoogleUsers\\\");\\n// const findOrCreate = require(\\\"mongoose-findorcreate\\\");\\n// require(\\\"dotenv\\\").config();\\n\\n// // Configure Passport\\n\\n// exports.initializeGoogleAuth = (passport) => {\\n//   passport.use(\\n//     new GoogleStrategy(\\n//       {\\n//         clientID: process.env.GOOGLE_CLIENT_ID,\\n//         clientSecret: process.env.GOOGLE_CLIEN\",\n            \"T_SECRET,\\n//         callbackURL: \\\"http://localhost:5000/auth/google/callback\\\",\\n//       },\\n//       function (accessToken, refreshToken, profile, cb) {\\n//         GoogleUsers.findOrCreate(\\n//           {\\n//             googleId: profile.id,\\n//             googleName: profile.displayName,\\n//           },\\n//           function (err, user) {\\n//             return cb(err, profile);\\n//           }\\n//         );\\n//       }\\n//     )\\n//   );\\n//   passport.serializeUser((user, done) => {\\n//     done(nul\",\n            \"l, user.id);\\n//   });\\n\\n//   passport.deserializeUser((id, done) => {\\n//     GoogleUsers.findById(id, (err, user) => {\\n//       done(err, user);\\n//     });\\n//   });\\n// };\\n\"\n        ],\n        \"backend/index.js\": [\n            \"const express = require(\\\"express\\\");\\nconst UserModel = require(\\\"./models/User\\\");\\nconst HeroProductsModel = require(\\\"./models/HeroProducts\\\");\\nconst ProductsModel = require(\\\"./models/Products\\\");\\nconst cors = require(\\\"cors\\\");\\nconst session = require(\\\"express-session\\\");\\nconst passport = require(\\\"passport\\\");\\n// const jwt = require(\\\"jsonwebtoken\\\");\\nrequire(\\\"dotenv\\\").config();\\nconst stripe = require(\\\"stripe\\\")(process.env.STRIPE_SECRET_KEY);\\nconst mongoose = require(\\\"mongoose\\\");\\nconst { initializePasspor\",\n            \"t } = require(\\\"./LocalAuth\\\");\\n// require(\\\"./Oauth\\\");\\n// const { initializeGoogleAuth } = require(\\\"./Oauth\\\");\\nconst bodyParser = require(\\\"body-parser\\\");\\nconst app = express();\\n\\napp.use(\\n    cors({\\n        origin: process.env.FRONTEND_DOMAIN,\\n        methods: \\\"GET,HEAD,PUT,PATCH,POST,DELETE\\\",\\n        allowedHeaders: [\\\"Content-Type\\\", \\\"Authorization\\\"],\\n        credentials: true,\\n    }),\\n);\\napp.use(express.json());\\n\\ninitializePassport(passport);\\n// initializeGoogleAuth(passport);\\n\\napp.use(bodyParser.\",\n            \"json());\\napp.use(bodyParser.urlencoded({ extended: true }));\\n\\napp.use(\\n    session({\\n        secret: \\\"jai Shree Ram\\\",\\n        resave: false,\\n        saveUninitialized: false,\\n    }),\\n);\\n\\napp.use(passport.initialize());\\napp.use(passport.session());\\n\\n//Serving Static files:\\napp.use(express.static(__dirname + \\\"/Images\\\"));\\n\\napp.get(\\\"/\\\", (req, res) => {\\n    res.send(\\\"Backend Successfully working!!\\\");\\n});\\n//Local Authentication:\\n\\napp.post(\\\"/register\\\", async (req, res) => {\\n    const ExistingUser = awa\",\n            \"it UserModel.findOne({ username: req.body.username });\\n\\n    if (ExistingUser) return res.status(201).json({ ExistingUser });\\n\\n    const user = await UserModel.create(req.body);\\n\\n    res.status(200).json({ user });\\n});\\n\\napp.post(\\\"/login\\\", passport.authenticate(\\\"local\\\"), async (req, res) => {\\n    const User = req.user;\\n    const user = await UserModel.findOne({\\n        username: User.username,\\n    }).populate(\\\"cart.items.product\\\");\\n    res.send({ user });\\n});\\n\\n//Product list\\napp.get(\\\"/HeroProducts\",\n            \"\\\", async (req, res) => {\\n    const HProducts = await HeroProductsModel.find();\\n    res.json(HProducts);\\n});\\n\\napp.get(\\\"/Products\\\", async (req, res) => {\\n    const Products = await ProductsModel.find();\\n    res.json(Products);\\n});\\n\\napp.get(\\\"/product/:id\\\", async (req, res) => {\\n    const id = req.params.id;\\n    const Product = await ProductsModel.findById(id);\\n    res.json(Product);\\n});\\n\\n//Cart functionality\\napp.post(\\\"/add-to-cart\\\", async (req, res) => {\\n    const { productId, userId } = req.body;\\n\",\n            \"\\n    try {\\n        const product = await ProductsModel.findById(productId);\\n        const user = await UserModel.findById(userId);\\n\\n        if (!product || !user) {\\n            return res.status(404).json({ message: \\\"Product or User not found\\\" });\\n        }\\n\\n        const cartItem = user.cart.items.find((item) => item.product == productId);\\n\\n        if (cartItem) {\\n            cartItem.quantity += 1;\\n        } else {\\n            user.cart.items.push({ product: productId });\\n        }\\n\\n        //\",\n            \" Update total price\\n        user.cart.totalPrice += product.discountPrice;\\n\\n        await user.populate(\\\"cart.items.product\\\");\\n\\n        await user.save();\\n\\n        res.json({\\n            message: \\\"Added To cart\\\",\\n            data: user.cart,\\n        });\\n    } catch (error) {\\n        console.error(\\\"Error adding to cart\\\", error);\\n        res.status(500).json({ message: \\\"Internal server error\\\" });\\n    }\\n});\\n\\n//Categorization:\\n\\napp.get(\\\"/products/:category\\\", async (req, res) => {\\n    const category \",\n            \"= req.params.category;\\n    const products = await ProductsModel.find({ category: category });\\n    res.json(products);\\n});\\n\\n//Stripe Integration:\\n\\napp.post(\\\"/create-checkout-session\\\", async (req, res) => {\\n    const { products } = req.body;\\n\\n    const LineItems = products.map((item) => ({\\n        price_data: {\\n            currency: \\\"inr\\\",\\n            product_data: {\\n                name: item.product.name,\\n            },\\n            unit_amount: item.product.discountPrice * 100,\\n        },\\n      \",\n            \"  quantity: item.quantity,\\n    }));\\n\\n    const session = await stripe.checkout.sessions.create({\\n        payment_method_types: [\\\"card\\\"],\\n        line_items: LineItems,\\n        mode: \\\"payment\\\",\\n        success_url: `${process.env.FRONTEND_DOMAIN}/paymentSuccess`,\\n        cancel_url: `${process.env.FRONTEND_DOMAIN}/paymentFailed`,\\n    });\\n\\n    res.json({ id: session.id });\\n});\\n\\n//Google Auth\\n// app.get(\\n//   \\\"/auth/google\\\",\\n//   passport.authenticate(\\\"google\\\", { scope: [\\\"profile\\\"] })\\n// );\\n\\n// app\",\n            \".get(\\n//   \\\"/auth/google/callback\\\",\\n//   passport.authenticate(\\\"google\\\", {\\n//     failureRedirect: \\\"http://localhost:5173/Login\\\",\\n//   }),\\n//   (req, res) => {\\n//     // Successful authentication, redirect to the home page\\n//     res.redirect(\\\"http://localhost:5173/\\\");\\n//   }\\n// );\\n\\napp.listen(5000, () => {\\n    console.log(\\\"Server listening on http://localhost:5000\\\");\\n});\\n\"\n        ],\n        \"backend/middlewares/isAuthenticated.js\": [\n            \"const jwt = require(\\\"jsonwebtoken\\\");\\n\\nexports.isAuthenticated = (req, res, next) => {\\n  // Get the token from the request headers\\n  const token = req.headers.authorization;\\n  // Check if token is provided\\n  if (!token) {\\n    return res.status(401).json({ message: \\\"Unauthorized: No token provided\\\" });\\n  }\\n\\n  // Verify the token\\n  jwt.verify(token, \\\"jai Shree Ram\\\", (err, decoded) => {\\n    if (err) {\\n      if (err.name === \\\"TokenExpiredError\\\") {\\n        return res.status(401).json({ message: \\\"Unaut\",\n            \"horized: Token expired\\\" });\\n      } else {\\n        return res.status(401).json({ message: \\\"Unauthorized: Invalid token\\\" });\\n      }\\n    }\\n    // Token is valid, set the decoded user on the request object\\n    req.user = decoded.user;\\n    next();\\n  });\\n};\\n\"\n        ],\n        \"backend/models/GoogleUsers.js\": [\n            \"const mongoose = require(\\\"mongoose\\\");\\nconst findOrCreate = require(\\\"mongoose-findorcreate\\\");\\n\\nconst GoogleUsersSchema = mongoose.Schema(\\n  {\\n    googleId: {\\n      type: String,\\n      required: true,\\n      unique: true,\\n    },\\n    googleName: {\\n      type: String,\\n      required: true,\\n    },\\n    role: {\\n      type: String,\\n      enum: [\\\"customer\\\", \\\"admin\\\"],\\n      default: \\\"customer\\\",\\n    },\\n    cart: {\\n      items: [\\n        {\\n          productId: {\\n            type: mongoose.Schema.Types.Object\",\n            \"Id,\\n            ref: \\\"Product\\\",\\n          },\\n          quantity: {\\n            type: Number,\\n            default: 1,\\n          },\\n        },\\n      ],\\n    },\\n    // You can add additional fields specific to Google users here\\n    // For example, profile picture, access token, etc.\\n    profilePicture: String,\\n    accessToken: String,\\n    refreshToken: String,\\n    // Other fields you may need\\n  },\\n  { timestamps: true }\\n); // Add timestamps for createdAt and updatedAt\\nGoogleUsersSchema.plugin(findOr\",\n            \"Create);\\n\\nmodule.exports = mongoose.model(\\\"GoogleUsers\\\", GoogleUsersSchema);\\n\"\n        ],\n        \"backend/models/HeroProducts.js\": [\n            \"const mongoose = require('mongoose')\\n\\nconst HeroProductSchema = mongoose.Schema({\\n    name:String,\\n    price:Number,\\n    discountPrice:Number,\\n    productImg:String,\\n    category:String,\\n})\\n\\nmodule.exports = mongoose.model('HeroProduct', HeroProductSchema)\"\n        ],\n        \"backend/models/Products.js\": [\n            \"const mongoose = require(\\\"mongoose\\\");\\n\\nconst ProductSchema = mongoose.Schema({\\n  name: {\\n    type: String,\\n    required: true,\\n  },\\n  price: {\\n    type: Number,\\n    required: true,\\n  },\\n  discountPrice: Number,\\n  productImg: {\\n    type: String,\\n    required: true,\\n  },\\n  company: String,\\n  productDetails:{\\n    type:Array\\n  },\\n  totalStock: Number,\\n  inStock: Boolean,\\n});\\n\\nmodule.exports = mongoose.model(\\\"Products\\\", ProductSchema);\\n\"\n        ],\n        \"backend/models/User.js\": [\n            \"const mongoose = require(\\\"mongoose\\\");\\nrequire(\\\"dotenv\\\").config();\\n\\nmongoose.connect(process.env.MONGODB_URI);\\n\\nconst UserSchema = mongoose.Schema({\\n  name: {\\n    type: String,\\n    required: true,\\n  },\\n  username: {\\n    type: String,\\n    required: true,\\n  },\\n  email: {\\n    type: String,\\n    required: true,\\n    unique: true,\\n  },\\n  password: {\\n    type: String,\\n    required: true,\\n  },\\n  pfp: String,\\n  googleID: String,\\n  googleName: String,\\n  address: {\\n    street: String,\\n    city: String,\\n    s\",\n            \"tate: String,\\n    pinCode: String,\\n    country: String,\\n  },\\n  role: {\\n    type: String,\\n    enum: [\\\"customer\\\", \\\"admin\\\"],\\n    default: \\\"customer\\\",\\n  },\\n  cart: {\\n    items: [\\n      {\\n        product: {\\n          type: mongoose.Schema.Types.ObjectId,\\n          ref: \\\"Products\\\",\\n        },\\n        quantity: {\\n          type: Number,\\n          default: 1,\\n        },\\n      },\\n    ], //Items array(objects)\\n\\n    totalPrice: {\\n      type: Number,\\n      default: 0,\\n    },\\n  },\\n  createdAt: {\\n    type: Da\",\n            \"te,\\n    default: Date.now,\\n  },\\n});\\n\\nmodule.exports = mongoose.model(\\\"Users\\\", UserSchema);\\n\"\n        ],\n        \"backend/package.json\": [\n            \"{\\n  \\\"name\\\": \\\"backend\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\",\\n    \\\"start\\\": \\\"node index.js\\\",\\n    \\\"dev\\\": \\\"nodemon index.js\\\"\\n  },\\n  \\\"keywords\\\": [],\\n  \\\"author\\\": \\\"\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"dependencies\\\": {\\n    \\\"body-parser\\\": \\\"^1.20.2\\\",\\n    \\\"cors\\\": \\\"^2.8.5\\\",\\n    \\\"dotenv\\\": \\\"^16.4.1\\\",\\n    \\\"express\\\": \\\"^4.18.2\\\",\\n    \\\"express-session\\\": \\\"^1.18.0\\\",\\n    \\\"jsonwebtoken\\\": \\\"^9.0.2\\\",\\n    \\\"jwt-decode\\\": \\\"^4.0.0\\\",\\n    \",\n            \"\\\"mongoose\\\": \\\"^8.0.4\\\",\\n    \\\"mongoose-findorcreate\\\": \\\"^4.0.0\\\",\\n    \\\"nodemon\\\": \\\"^3.0.2\\\",\\n    \\\"passport\\\": \\\"^0.7.0\\\",\\n    \\\"passport-google-oauth20\\\": \\\"^2.0.0\\\",\\n    \\\"passport-local\\\": \\\"^1.0.0\\\",\\n    \\\"passport-local-mongoose\\\": \\\"^8.0.0\\\",\\n    \\\"stripe\\\": \\\"^14.17.0\\\"\\n  }\\n}\\n\"\n        ],\n        \"backend/vercel.json\": [\n            \"{\\n  \\\"version\\\": 2,\\n  \\\"builds\\\": [\\n    {\\n      \\\"src\\\": \\\"*.js\\\",\\n      \\\"use\\\": \\\"@vercel/node\\\"\\n    }\\n  ],\\n  \\\"routes\\\": [\\n    {\\n      \\\"src\\\": \\\"/(.*)\\\",\\n      \\\"dest\\\": \\\"/\\\"\\n    }\\n  ]\\n}\\n\"\n        ],\n        \"my-store/'\": [\n            \"import React from \\\"react\\\";\\nimport { useState } from \\\"react\\\";\\nimport { Link } from \\\"react-router-dom\\\";\\nimport { useNavigate } from \\\"react-router-dom\\\";\\nimport { useDispatch } from \\\"react-redux\\\";\\nimport { loginUser } from \\\"../features/auth/authActions\\\";\\n// import { GoogleLoginSuccess } from \\\"../features/auth/authSlice\\\";\\nimport { toast } from \\\"react-toastify\\\";\\nimport { useGSAP } from \\\"@gsap/react\\\";\\nimport gsap from \\\"gsap\\\";\\n\\nexport default function LoginPage() {\\n  useGSAP(() => {\\n    gsap.from(\\\".Form\",\n            \"Card\\\", {\\n      opacity: 0,\\n      y: 100,\\n      delay: 0.8,\\n      duration: 1,\\n    });\\n    gsap.from(\\\".backText\\\", {\\n      y: -100,\\n      opacity: 0,\\n      duration: 0.5,\\n    });\\n  });\\n  const navigateTo = useNavigate();\\n  const dispatch = useDispatch();\\n\\n  const [username, setusername] = useState(\\\"\\\");\\n  const [password, setpassword] = useState(\\\"\\\");\\n\\n  const handleLogin = async (e) => {\\n    e.preventDefault();\\n    try {\\n      dispatch(loginUser({ username, password }));\\n      navigateTo(\\\"/\\\");\\n    \",\n            \"} catch (error) {\\n      toast.error(\\\"Login failed, please try again\\\");\\n    }\\n  };\\n  return (\\n    <>\\n      <div className=\\\"relative  h-screen w-full bg-[#23232f]\\\">\\n        <div className=\\\" absolute left-1/2 top-1/2 z-0 h-auto w-full -translate-x-1/2 -translate-y-1/2  \\\">\\n          <h1 className=\\\"backText text-center font-[Montserrat] text-[30vh] uppercase tracking-widest text-[#72748e]\\\">\\n            Login\\n          </h1>\\n        </div>\\n        <div className=\\\"relative z-10 flex h-screen w-full ite\",\n            \"ms-center justify-center\\\">\\n          <div className=\\\"FormCard flex h-[50vh] w-[35vw] items-center  rounded-2xl border-2 p-10 backdrop-blur-lg\\\">\\n            <form\\n              onSubmit={handleLogin}\\n              className=\\\"flex h-full w-full flex-col items-center justify-center gap-10\\\"\\n            >\\n              <h1 className=\\\"pt-14 font-[Poppins] text-4xl font-extrabold text-white\\\">\\n                Login\\n              </h1>\\n              <div className=\\\"flex w-full flex-col gap-2\\\">\\n          \",\n            \"      <h1 className=\\\"text-white\\\">Username</h1>\\n                <input\\n                  type=\\\"text\\\"\\n                  name=\\\"Username\\\"\\n                  value={username}\\n                  onChange={(e) => setusername(e.target.value)}\\n                  className=\\\"block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dar\",\n            \"k:focus:ring-blue-500\\\"\\n                  placeholder=\\\"Enter your username\\\"\\n                />\\n              </div>\\n              <input\\n                type=\\\"password\\\"\\n                name=\\\"Password\\\"\\n                value={password}\\n                onChange={(e) => setpassword(e.target.value)}\\n                placeholder=\\\"Enter your password\\\"\\n                className=\\\"block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 \",\n            \"dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500\\\"\\n              />\\n              <button className=\\\"mt-10 w-[60%] rounded-2xl bg-[#676eff] font-[Poppins] text-2xl font-bold\\\">\\n                Login\\n              </button>\\n              <div className=\\\"mt-8 flex gap-2 text-xl text-[#72748e]\\\">\\n                <h3>New Here??</h3>\\n                <Link\\n                  to=\\\"/Register\\\"\\n                  className=\\\"text-\",\n            \"[#676eff] hover:text-[#313690]\\\"\\n                >\\n                  Create Account\\n                </Link>\\n              </div>\\n            </form>\\n          </div>\\n        </div>\\n      </div>\\n    </>\\n  );\\n}\\n\\n/*\\n\\n*/\\n\"\n        ],\n        \"my-store/.eslintrc.cjs\": [\n            \"module.exports = {\\n  root: true,\\n  env: { browser: true, es2020: true },\\n  extends: [\\n    'eslint:recommended',\\n    'plugin:react/recommended',\\n    'plugin:react/jsx-runtime',\\n    'plugin:react-hooks/recommended',\\n  ],\\n  ignorePatterns: ['dist', '.eslintrc.cjs'],\\n  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },\\n  settings: { react: { version: '18.2' } },\\n  plugins: ['react-refresh'],\\n  rules: {\\n    'react-refresh/only-export-components': [\\n      'warn',\\n      { allowConstantExpo\",\n            \"rt: true },\\n    ],\\n  },\\n}\\n\"\n        ],\n        \"my-store/.prettierrc\": [\n            \"{\\n  \\\"plugins\\\": [\\\"prettier-plugin-tailwindcss\\\"]\\n}\\n\"\n        ],\n        \"my-store/README.md\": [\n            \"# React + Vite\\n\\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\\n\\nCurrently, two official plugins are available:\\n\\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh\\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\\n\"\n        ],\n        \"my-store/package.json\": [\n            \"{\\n  \\\"name\\\": \\\"my-store\\\",\\n  \\\"private\\\": true,\\n  \\\"version\\\": \\\"0.0.0\\\",\\n  \\\"type\\\": \\\"module\\\",\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"vite\\\",\\n    \\\"build\\\": \\\"vite build\\\",\\n    \\\"lint\\\": \\\"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\\\",\\n    \\\"preview\\\": \\\"vite preview\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"@gsap/react\\\": \\\"^2.1.1\\\",\\n    \\\"@reduxjs/toolkit\\\": \\\"^2.1.0\\\",\\n    \\\"@stripe/stripe-js\\\": \\\"^3.0.3\\\",\\n    \\\"axios\\\": \\\"^1.6.5\\\",\\n    \\\"flowbite-react\\\": \\\"^0.10.1\\\",\\n    \\\"gsap\\\": \\\"^3.12.5\\\",\\n    \\\"locomotive-scroll\\\": \\\"^5.0.0-\",\n            \"beta.11\\\",\\n    \\\"prettier\\\": \\\"^3.2.4\\\",\\n    \\\"prettier-plugin-tailwindcss\\\": \\\"^0.5.11\\\",\\n    \\\"react\\\": \\\"^18.2.0\\\",\\n    \\\"react-dom\\\": \\\"^18.2.0\\\",\\n    \\\"react-icons\\\": \\\"^5.0.1\\\",\\n    \\\"react-redux\\\": \\\"^9.1.0\\\",\\n    \\\"react-responsive-carousel\\\": \\\"^3.2.23\\\",\\n    \\\"react-router\\\": \\\"^6.21.3\\\",\\n    \\\"react-router-dom\\\": \\\"^6.21.3\\\",\\n    \\\"react-toastify\\\": \\\"^10.0.5\\\",\\n    \\\"shadcn-ui\\\": \\\"^0.8.0\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/react\\\": \\\"^18.2.43\\\",\\n    \\\"@types/react-dom\\\": \\\"^18.2.17\\\",\\n    \\\"@vitejs/plugin-react\\\": \\\"^4.2.1\\\",\\n    \\\"\",\n            \"autoprefixer\\\": \\\"^10.4.16\\\",\\n    \\\"eslint\\\": \\\"^8.55.0\\\",\\n    \\\"eslint-plugin-react\\\": \\\"^7.33.2\\\",\\n    \\\"eslint-plugin-react-hooks\\\": \\\"^4.6.0\\\",\\n    \\\"eslint-plugin-react-refresh\\\": \\\"^0.4.5\\\",\\n    \\\"postcss\\\": \\\"^8.4.33\\\",\\n    \\\"tailwindcss\\\": \\\"^3.4.1\\\",\\n    \\\"vite\\\": \\\"^5.0.8\\\"\\n  },\\n  \\\"description\\\": \\\"This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\\\",\\n  \\\"main\\\": \\\"postcss.config.js\\\",\\n  \\\"author\\\": \\\"\\\",\\n  \\\"license\\\": \\\"ISC\\\"\\n}\\n\"\n        ],\n        \"my-store/postcss.config.js\": [\n            \"export default {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\\n\"\n        ],\n        \"my-store/src/App.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { BrowserRouter as Router, Route, Routes } from \\\"react-router-dom\\\";\\nimport {\\n    Home,\\n    ProductPage,\\n    LoginPage,\\n    RegisterPage,\\n    CategoryPage,\\n    CartPage,\\n    FailedPage,\\n    SuccessPage,\\n} from \\\"./pages\\\";\\nimport { Navbar, Footer } from \\\"./components\\\";\\nimport { useSelector } from \\\"react-redux\\\";\\nimport ScrollToTop from \\\"./components/ScrollToTop\\\";\\n\\nexport default function App() {\\n    const user = useSelector((state) => state.auth.user);\\n\\n    return (\",\n            \"\\n        <>\\n            <Router>\\n                <ScrollToTop />\\n                <Navbar user={user} />\\n                <Routes>\\n                    <Route path=\\\"/\\\" element={<Home />} />\\n                    <Route path=\\\"/product/:id\\\" element={<ProductPage />} />\\n                    <Route path=\\\"/products/:category\\\" element={<CategoryPage />} />\\n                    <Route path=\\\"/Login\\\" element={<LoginPage />} />\\n                    <Route path=\\\"/Register\\\" element={<RegisterPage />} />\\n           \",\n            \"         <Route path=\\\"/paymentSuccess\\\" element={<SuccessPage />} />\\n                    <Route path=\\\"/paymentFailed\\\" element={<FailedPage />} />\\n                    <Route path=\\\"/Cart\\\" element={user ? <CartPage /> : <Home />} />\\n                </Routes>\\n                <Footer />\\n            </Router>\\n        </>\\n    );\\n}\\n\\nconst AuthRoutes = () => (\\n    <>\\n        <Route path=\\\"/Login\\\" element={<LoginPage />} />\\n        <Route path=\\\"/Register\\\" element={<RegisterPage />} />\\n    </>\\n);\\n\\n/*\\n  Imple\",\n            \"ment the toast feature using the react toast library, also carry forward the functionality from the hero cards to the featured card to be added to the cart\\n\\n  as the navbar isnt sticky or fixed, either make it sticky and implement the toast\\n\\n  also using the toast use it for the authentication system too, for signalling\\n  if logged in succesfully or not\\n\\n  \\n\\n*/\\n\"\n        ],\n        \"my-store/src/AuthLayout.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { Outlet } from \\\"react-router\\\";\\n\\nfunction AuthLayout() {\\n  return (\\n    <>\\n      <Outlet />\\n    </>\\n  );\\n}\\n\\nexport default AuthLayout;\\n\"\n        ],\n        \"my-store/src/components/CatProductCard.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { FiPlusCircle } from \\\"react-icons/fi\\\";\\nimport { Link } from \\\"react-router-dom\\\";\\n\\nconst CatProductCard = ({category}) => {\\n  const _id = \\\"temp\\\";\\n  return (\\n    <>\\n      <div className=\\\"prodcard  flex flex-col items-center \\\">\\n        <Link to={`/`}>\\n          <img\\n            src={`/${category}.png`}\\n            className=\\\"h-[35vh] w-[35vw] object-contain drop-shadow-[0_35px_35px_rgba(0,0,0,0.98)]\\\"\\n          />\\n        </Link>\\n        <h1 className=\\\"font-[Montser\",\n            \"rat]\\\">Logitech G Pro</h1>\\n        <h2 className=\\\"text-[#72748e] \\\">Logitech</h2>\\n        <h1 className=\\\"font-[Montserrat] text-3xl text-[#676eff]\\\">$100</h1>\\n        <div className=\\\"browse my-2\\\">\\n          <button>\\n            <div className=\\\"flex items-center gap-2 font-[Montserrat]\\\">\\n              <FiPlusCircle className=\\\"text-2xl text-[#676eff]\\\" />\\n              <h1 className=\\\"text-l font-bold uppercase text-white\\\">\\n                Add to Cart\\n              </h1>\\n            </div>\\n          </\",\n            \"button>\\n        </div>\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default CatProductCard;\\n\"\n        ],\n        \"my-store/src/components/CatProductList.jsx\": [\n            \"import React from \\\"react\\\";\\nimport CatProductCard from \\\"./CatProductCard\\\";\\n\\nfunction CatProductList({ products }) {\\n  return (\\n    <div className=\\\"grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\\\">\\n      {products.map((product) => (\\n        <CatProductCard key={product.id} product={product} />\\n      ))}\\n    </div>\\n  );\\n}\\n\\nexport default CatProductList;\\n\"\n        ],\n        \"my-store/src/components/CategoriesCard.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { FiMinusCircle } from \\\"react-icons/fi\\\";\\nimport { Link } from \\\"react-router-dom\\\";\\n\\nconst CategoriesCard = ({image, category, price}) => {\\n  return (\\n    <>\\n      <div className=\\\"w-1/2 h-1/2 border-4 border-[#72748e] overflow-hidden relative shadow-2xl\\\">\\n        <div className=\\\"back absolute top-[60%] -translate-y-1/2 -translate-x-7 font-[Montserrat] text-9xl text-[#72748e] opacity-15 select-none font-extrabold z-0\\\">\\n          <h1 className=\\\"uppercase\\\">{category}\",\n            \"</h1>\\n        </div>\\n        <div className=\\\"front h-full w-full flex justify-between\\\">\\n          <div className=\\\"txt font-[Poppins] p-8 flex flex-col gap-20\\\">\\n            <div className=\\\"price\\\">\\n              <h3 className=\\\"text-[#72748e] text-l\\\">Starting From</h3>\\n              <h3 className=\\\"text-[#676eff] text-3xl font-bold font-[Montserrat]\\\">${price},-</h3>\\n            </div>\\n            <div className=\\\"class\\\">\\n              <h1 className=\\\"font-extrabold text-white text-3xl\\\">{category}</h1>\",\n            \"\\n              <div className=\\\"browse my-10\\\">\\n                <Link to={`products/${category}`}>\\n                  <div className=\\\"flex items-center gap-2 font-[Montserrat]\\\">\\n                    <FiMinusCircle className=\\\"text-[#676eff] text-4xl\\\" />\\n                    <h1 className=\\\"uppercase text-white text-xl font-bold\\\">\\n                      Browse\\n                    </h1>\\n                  </div>\\n                </Link>\\n              </div>\\n            </div>\\n          </div>\\n          <div\",\n            \" className=\\\"Image translate-x-20\\\">\\n            <img src={image} className=\\\"h-full w-full object-cover scale-150 drop-shadow-2xl\\\" />\\n          </div>\\n        </div>\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default CategoriesCard;\\n\"\n        ],\n        \"my-store/src/components/Featured.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { Carousel } from \\\"react-responsive-carousel\\\";\\nimport { FiPlusCircle } from \\\"react-icons/fi\\\";\\nimport FeaturedCard from \\\"./FeaturedCard\\\";\\nconst Featured = ({ featuredCards }) => {\\n  return (\\n    <>\\n      <div className=\\\"relative h-screen w-full\\\">\\n        <div className=\\\"backTxt absolute top-[45%] z-0 -translate-x-7 -translate-y-1/2 select-none overflow-hidden font-[Montserrat] text-[18rem] font-extrabold uppercase tracking-wide text-[#72748e] opacity-15\\\">\\n       \",\n            \"   <h1>Featured</h1>\\n        </div>\\n        <div className=\\\"card relative z-10 flex h-full w-full flex-shrink items-center justify-center text-white\\\">\\n          {featuredCards.map((card) => (\\n            <FeaturedCard key={card._id} card={card} />\\n          ))}\\n        </div>\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default Featured;\\n\"\n        ],\n        \"my-store/src/components/FeaturedCard.jsx\": [\n            \"import axios from \\\"axios\\\";\\nimport React from \\\"react\\\";\\nimport { FiPlusCircle } from \\\"react-icons/fi\\\";\\nimport { Link } from \\\"react-router-dom\\\";\\nimport { AddToCart } from \\\"../features/auth/authSlice\\\";\\nimport { useSelector, useDispatch } from \\\"react-redux\\\";\\nimport { toast } from \\\"react-toastify\\\";\\n\\nconst FeaturedCard = ({ card }) => {\\n  const dispatch = useDispatch();\\n\\n  const user = useSelector((state) => state.auth.user);\\n  const cart = useSelector((state) => state.auth.cart);\\n\\n  const { _id, produ\",\n            \"ctImg, name, price, company } = card;\\n\\n  if (user) {\\n    var Uid = user.user._id;\\n  }\\n  async function addToCart(productid, Uid) {\\n    if (user) {\\n      const response = await axios.post(`${import.meta.env.VITE_BACKEND_DOMAIN}/add-to-cart`, {\\n        productId: productid,\\n        userId: Uid,\\n      });\\n      const productDets = response.data;\\n      dispatch(AddToCart(productDets.data.items));\\n      toast.success(\\\"Item Added to cart\\\");\\n    } else {\\n      toast.error(\\\"Not Logged in, Please log in \",\n            \"to add items to cart\\\");\\n    }\\n  }\\n\\n  return (\\n    <>\\n      {console.log(Uid)}\\n      <div className=\\\"prodcard flex flex-col items-center \\\">\\n        <Link to={`/product/${_id}`}>\\n          <img\\n            src={productImg}\\n            className=\\\"h-[35vh] w-[35vw] object-contain drop-shadow-[0_35px_35px_rgba(0,0,0,0.98)]\\\"\\n          />\\n        </Link>\\n        <h1 className=\\\"font-[Montserrat]\\\">{name}</h1>\\n        <h2 className=\\\"text-[#72748e] \\\">{company}</h2>\\n        <h1 className=\\\"font-[Montserrat] \",\n            \"text-3xl text-[#676eff]\\\">${price}</h1>\\n        <div className=\\\"browse my-2\\\">\\n          <button onClick={() => addToCart(_id, Uid)}>\\n            <div className=\\\"flex items-center gap-2 font-[Montserrat]\\\">\\n              <FiPlusCircle className=\\\"text-2xl text-[#676eff]\\\" />\\n              <h1 className=\\\"text-l font-bold uppercase text-white\\\">\\n                Add to Cart\\n              </h1>\\n            </div>\\n          </button>\\n        </div>\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default FeaturedCard;\",\n            \"\\n\"\n        ],\n        \"my-store/src/components/Footer.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { FaGithub, FaInstagram, FaTwitter } from \\\"react-icons/fa\\\";\\nimport { useLocation } from \\\"react-router\\\";\\n\\nconst Footer = () => {\\n    const location = useLocation();\\n    if (location.pathname === \\\"/Login\\\" || location.pathname === \\\"/Register\\\") {\\n        return null;\\n    }\\n    return (\\n        <div className=\\\"hidden lg:block\\\">\\n            <div className=\\\"flex min-h-[40vh] w-full justify-between bg-[#111117] p-10 text-xl text-white\\\">\\n                <div className=\\\"l\",\n            \"inks flex gap-24 p-4\\\">\\n                    <ul className=\\\"list flex flex-col gap-4 text-2xl\\\">\\n                        <a href=\\\"/\\\">\\n                            <FaGithub />\\n                        </a>\\n                        <a href=\\\"/\\\">\\n                            <FaInstagram />\\n                        </a>\\n                        <a href=\\\"/\\\">\\n                            <FaTwitter />\\n                        </a>\\n                    </ul>\\n                    <ul className=\\\"list flex flex-col g\",\n            \"ap-2\\\">\\n                        <a href=\\\"/\\\">Mouse</a>\\n                        <a href=\\\"/\\\">Keyboards</a>\\n                        <a href=\\\"/\\\">Headsets</a>\\n                        <a href=\\\"/\\\">Mousepads</a>\\n                    </ul>\\n                    <ul className=\\\"flex flex-col gap-2\\\">\\n                        <a href=\\\"\\\">Register</a>\\n                        <a href=\\\"\\\">Login</a>\\n                        <a href=\\\"\\\">FAQs</a>\\n                        <a href=\\\"\\\">About</a>\\n                    </ul>\\n       \",\n            \"         </div>\\n                <div className=\\\"about\\\">\\n                    <p className=\\\"text-l max-w-[30vw] text-[#72748e]\\\">\\n                        Test Card Details - 4000 0035 6000 0008\\n                        <br />\\n                        Any Valid Date, and random CVV number\\n                        <p>\\n                            Test Login Details: <br /> Username: Alex <br /> Password: Alex22\\n                        </p>\\n                    </p>\\n                </div>\\n            </div\",\n            \">\\n            <div className=\\\"copyright flex h-[10vh] items-center justify-center  border-y border-[#72748e] bg-[#111117] px-10 text-white\\\">\\n                <p>Copyright&copy; 2023, All rights reserved </p>\\n            </div>\\n        </div>\\n    );\\n};\\n\\nexport default Footer;\\n\"\n        ],\n        \"my-store/src/components/HeroCard.jsx\": [\n            \"import React, { useEffect, useRef } from \\\"react\\\";\\nimport { CiCirclePlus } from \\\"react-icons/ci\\\";\\nimport { useSelector, useDispatch } from \\\"react-redux\\\";\\nimport axios from \\\"axios\\\";\\nimport { AddToCart } from \\\"../features/auth/authSlice\\\";\\nimport { toast } from \\\"react-toastify\\\";\\nimport { useGSAP } from \\\"@gsap/react\\\";\\nimport gsap from \\\"gsap\\\";\\n\\nconst HeroCard = ({\\n    category,\\n    productImg,\\n    price,\\n    discountPrice,\\n    name,\\n    _id,\\n}) => {\\n    const mainRef = useRef(null);\\n    useGSAP(() => \",\n            \"{\\n        gsap.fromTo(\\n            \\\".Image\\\",\\n            {\\n                x: -10,\\n                opacity: 0,\\n            },\\n            { x: 0, opacity: 1, duration: 1, delay: 0.5 },\\n        );\\n\\n        gsap.to(\\\".categoryMask\\\", {\\n            y: -100,\\n            duration: 0.5,\\n            delay: 0.2,\\n        }),\\n            gsap.to(\\\".nameMask\\\", {\\n                // x: -400,\\n                opacity: 0,\\n                duration: 0.9,\\n                delay: 1,\\n            }),\\n            gsap.fro\",\n            \"mTo(\\n                \\\".backText\\\",\\n                {\\n                    x: -1000,\\n                    opacity: 0,\\n                },\\n                { x: -20, opacity: 0.25, duration: 1, delay: 1.2 },\\n            ),\\n            gsap.fromTo(\\n                \\\".prices\\\",\\n                {\\n                    // y: -100,\\n                    opacity: 0,\\n                },\\n                { opacity: 1, duration: 0.5, delay: 1, stagger: 0.1 },\\n            );\\n    });\\n\\n    const dispatch = useDispatch();\\n\",\n            \"    const user = useSelector((state) => state.auth.user);\\n\\n    if (user) {\\n        var Uid = user.user._id;\\n    }\\n    async function addToCart(productid, Uid) {\\n        if (user) {\\n            const response = await axios.post(\\n                `${import.meta.env.VITE_BACKEND_DOMAIN}/add-to-cart`,\\n                {\\n                    productId: productid,\\n                    userId: Uid,\\n                },\\n            );\\n            const productDets = response.data;\\n            dispatch(AddToCa\",\n            \"rt(productDets.data.items));\\n            toast.success(\\\"Item Added to cart\\\");\\n        } else {\\n            toast.error(\\\"Not Logged in, Please log in to add items to cart\\\");\\n        }\\n    }\\n    return (\\n        <>\\n            <div ref={mainRef} className=\\\"mainWrapper relative h-[85vh] w-full\\\">\\n                <div className=\\\"backText absolute top-[45%] z-0 -translate-x-7 -translate-y-1/2 select-none overflow-hidden font-[Montserrat] text-[18rem] font-extrabold uppercase tracking-wide text-[#72748\",\n            \"e] opacity-15\\\">\\n                    <h1>{category}</h1>\\n                </div>\\n                <div className=\\\"front relative  z-10 flex h-[100%] w-full items-center justify-around font-[Poppins]\\\">\\n                    <div className=\\\"Section-L flex h-full max-w-[30%] flex-col justify-evenly\\\">\\n                        <div className=\\\"prodName px-20 text-left text-7xl font-bold tracking-wider text-white\\\">\\n                            <h2 className=\\\"\\\">\\n                                <div className=\\\"\",\n            \"categoryMask absolute h-20 w-1/4 bg-[#23232f]\\\"></div>\\n                                <div className=\\\"nameMask absolute z-0 h-[35vh] w-[30%] bg-[#23232f]\\\"></div>\\n                                <span>{name}</span>\\n                            </h2>\\n                        </div>\\n                        <div className=\\\"price flex gap-8 px-20 text-5xl\\\">\\n                            <p className=\\\"prices font-bold text-[#72748e] line-through\\\">\\n                                ${price}\\n                 \",\n            \"           </p>\\n                            <p className=\\\"prices font-bold text-[#676eff]\\\">\\n                                ${discountPrice}\\n                            </p>\\n                        </div>\\n                        <div className=\\\"w-fit px-20\\\">\\n                            <button\\n                                onClick={() => addToCart(_id, Uid)}\\n                                className=\\\"prices flex items-center gap-4\\\"\\n                            >\\n                                \",\n            \"<div className=\\\"ATC-Btn text-6xl text-[#676eff]\\\">\\n                                    <CiCirclePlus />\\n                                </div>\\n                                <div className=\\\"Cart font-[Montserrat] text-lg uppercase text-white\\\">\\n                                    Add to Cart\\n                                </div>\\n                            </button>\\n                        </div>\\n                    </div>\\n                    <div className=\\\"Image h-[90%] w-[45%]\\\">\\n             \",\n            \"           <img\\n                            src={productImg}\\n                            alt=\\\"ProductImage\\\"\\n                            className=\\\"Image object-cover drop-shadow-[0_40px_40px_rgba(0,0,0,0.7)]\\\"\\n                        />\\n                    </div>\\n                </div>\\n            </div>\\n        </>\\n    );\\n};\\n\\nexport default HeroCard;\\n\"\n        ],\n        \"my-store/src/components/HeroProduct.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { Carousel } from \\\"react-responsive-carousel\\\";\\nimport \\\"react-responsive-carousel/lib/styles/carousel.min.css\\\";\\nimport HeroCard from \\\"./HeroCard\\\";\\nimport { GrNext } from \\\"react-icons/gr\\\";\\nimport { GrPrevious } from \\\"react-icons/gr\\\";\\n\\nconst HeroProduct = ({ cards }) => {\\n  const arrowStyles = {\\n    position: \\\"absolute\\\",\\n    top: \\\"50%\\\",\\n    transform: \\\"translateY(-50%)\\\",\\n    zIndex: 2,\\n  };\\n  return (\\n    <>\\n      {console.log(cards)}\\n      <Carousel\\n        showSt\",\n            \"atus={false}\\n        renderArrowPrev={(onClickHandler, hasPrev, label) =>\\n          hasPrev && (\\n            <button\\n              type=\\\"button\\\"\\n              onClick={onClickHandler}\\n              title={label}\\n              style={{ ...arrowStyles, right: 0, top: \\\"40%\\\" }}\\n            >\\n              <GrPrevious className=\\\"mx-5 text-5xl text-[#72748e] transition-all hover:scale-125\\\" />\\n            </button>\\n          )\\n        }\\n        renderArrowNext={(onClickHandler, hasNext, label) =>\\n     \",\n            \"     hasNext && (\\n            <button\\n              type=\\\"button\\\"\\n              onClick={onClickHandler}\\n              title={label}\\n              style={{ ...arrowStyles, right: 0 }}\\n            >\\n              <GrNext className=\\\"mx-5 text-5xl text-[#72748e] transition-all hover:scale-125\\\" />\\n            </button>\\n          )\\n        }\\n      >\\n        {cards.map((card, index) => (\\n          <HeroCard key={index} {...card} />\\n        ))}\\n      </Carousel>\\n    </>\\n  );\\n};\\n\\nexport default HeroProd\",\n            \"uct;\\n\"\n        ],\n        \"my-store/src/components/MobileLoader.jsx\": [\n            \"const MobileLoader = () => {\\n    return (\\n        <div className=\\\" lg:hidden absolute left-0 top-0 z-50 flex h-[100vh] w-[100vw] items-center justify-center bg-zinc-900 p-10 text-center text-2xl font-[Montserrat] font-bold uppercase text-white\\\">\\n            <h1>\\n                \\\"We suggest you to checkout{\\\" \\\"}\\n                <span className=\\\"bg-[#676eff] p-1\\\">GearUP</span> on a\\n                Desktop for better experience.\\\"\\n            </h1>\\n        </div>\\n    );\\n};\\n\\nexport default MobileLoade\",\n            \"r;\\n\"\n        ],\n        \"my-store/src/components/Navbar.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { Link, useLocation } from \\\"react-router-dom\\\";\\nimport { useSelector } from \\\"react-redux\\\";\\nimport { FaShoppingCart } from \\\"react-icons/fa\\\";\\nimport { useGSAP } from \\\"@gsap/react\\\";\\nimport gsap from \\\"gsap\\\";\\nimport { Button } from \\\"flowbite-react\\\";\\n\\nconst Navbar = () => {\\n    useGSAP(() => {\\n        gsap.from(\\\".LeftLinks\\\", {\\n            y: -50,\\n            opacity: 0,\\n            duration: 0.5,\\n            stagger: 0.2,\\n            ease: \\\"power1\\\",\\n            delay: \",\n            \"2,\\n        });\\n        gsap.from(\\\".rightLinks\\\", {\\n            y: -50,\\n            opacity: 0,\\n            duration: 0.5,\\n            delay: 2,\\n            stagger: 0.2,\\n            ease: \\\"power1\\\",\\n        });\\n    });\\n    const location = useLocation();\\n    const user = useSelector((state) => state.auth.user);\\n    const cart = useSelector((state) => state.auth.cart);\\n\\n    if (location.pathname === \\\"/Login\\\" || location.pathname === \\\"/Register\\\") {\\n        return null;\\n    }\\n\\n    return (\\n        <d\",\n            \"iv className=\\\"hidden lg:block\\\">\\n            <div className=\\\"flex h-[15vh] w-full items-center justify-between bg-[#23232f] p-12 font-[Poppins] text-white\\\">\\n                <div className=\\\"left flex\\\">\\n                    <Link to=\\\"/\\\">\\n                        <img\\n                            src=\\\"/Logo.png\\\"\\n                            alt=\\\"logo\\\"\\n                            className=\\\"LeftLinks h-16 w-16 object-cover invert\\\"\\n                        />\\n                    </Link>\\n                   \",\n            \" <ul className=\\\" mx-16 flex items-center gap-14\\\">\\n                        <Link className=\\\"LeftLinks\\\" to={`/products/Mouse`}>\\n                            Mouse\\n                        </Link>\\n                        <Link className=\\\"LeftLinks\\\" to={`/products/Keyboard`}>\\n                            Keyboard\\n                        </Link>\\n                        <Link className=\\\"LeftLinks\\\" to={`/products/Headset`}>\\n                            Headset\\n                        </Link>\\n              \",\n            \"          <Link className=\\\"LeftLinks\\\" to={`/products/Mousepad`}>\\n                            Mousepad\\n                        </Link>\\n                    </ul>\\n                </div>\\n                <div className=\\\"Right flex\\\">\\n                    <div className=\\\"Profile mx-16 flex items-center gap-5\\\">\\n                        {user ? (\\n                            <h1>{user.user.username}</h1>\\n                        ) : (\\n                            <Link to=\\\"/Login\\\" className=\\\"rightLinks\\\">\\n    \",\n            \"                            <Button color={\\\"purple\\\"}>Login</Button>\\n                            </Link>\\n                            //className=\\\"rightLinks border-3 border-white rounded-3xl p-2\\\"\\n                        )}\\n                    </div>\\n                    <div className=\\\"cart mt-16 flex flex-grow flex-col gap-10\\\">\\n                        <Link className=\\\"rightLinks\\\" to=\\\"/Cart\\\">\\n                            <div className=\\\"text-3xl text-[#676eff]\\\">\\n                                <FaS\",\n            \"hoppingCart />\\n                            </div>\\n                        </Link>\\n\\n                        <div>\\n                            {user ? (\\n                                <p className=\\\"rightLinks rotate-90 font-[Poppins] text-lg uppercase\\\">\\n                                    ${cart.totalPrice}\\n                                </p>\\n                            ) : (\\n                                <p className=\\\"rightLinks rotate-90 font-[Poppins] text-lg uppercase\\\">\\n                   \",\n            \"                 $0\\n                                </p>\\n                            )}\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    );\\n};\\n\\nexport default Navbar;\\n\"\n        ],\n        \"my-store/src/components/PaymentFailCard.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { Link } from \\\"react-router-dom\\\";\\n\\nconst PaymentFailCard = () => {\\n  return (\\n    <div className=\\\"flex min-h-screen items-center justify-center bg-[#23232f]\\\">\\n      <div className=\\\"max-w-lg rounded-lg bg-[#72748e] p-6 shadow-lg\\\">\\n        <div className=\\\"text-center font-[Poppins]\\\">\\n          <img\\n            src={`/failure.svg`}\\n            alt=\\\"Payment Successful\\\"\\n            className=\\\"mx-auto h-16 w-16\\\"\\n          />\\n          <h2 className=\\\"mt-4 text-3xl font\",\n            \"-bold\\\">Payment Failed!</h2>\\n          <p className=\\\"mb-8 mt-2 text-gray-800 text-xl\\\">\\n            Something went wrong with your payment, Please try again...\\n          </p>\\n          <Link\\n            className=\\\"rounded bg-[#676eff] px-4 py-2 text-white text-xl transition hover:bg-purple-700\\\"\\n            to={\\\"/\\\"}\\n          >\\n            Continue to Shop\\n          </Link>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default PaymentFailCard;\"\n        ],\n        \"my-store/src/components/PaymentSuccessCard.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { Link } from \\\"react-router-dom\\\";\\n\\nconst PaymentSuccessCard = () => {\\n  return (\\n    <div className=\\\"flex min-h-screen items-center justify-center bg-[#23232f]\\\">\\n      <div className=\\\"max-w-lg rounded-lg bg-[#72748e] p-6 shadow-lg\\\">\\n        <div className=\\\"text-center font-[Poppins]\\\">\\n          <img\\n            src={`/success.svg`}\\n            alt=\\\"Payment Successful\\\"\\n            className=\\\"mx-auto h-16 w-16\\\"\\n          />\\n          <h2 className=\\\"mt-4 text-3xl f\",\n            \"ont-bold\\\">Payment Successful!</h2>\\n          <p className=\\\"mb-8 mt-2 text-gray-800 text-xl\\\">\\n            Thank you for your purchase. Your payment has been successfully\\n            processed.\\n          </p>\\n          <Link\\n            className=\\\"rounded bg-[#676eff] px-4 py-2 text-white text-xl transition hover:bg-purple-700\\\"\\n            to={\\\"/\\\"}\\n          >\\n            Continue to Shop\\n          </Link>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default PaymentSuccessCard;\\n\"\n        ],\n        \"my-store/src/components/ProductCard.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { MdExpandMore } from \\\"react-icons/md\\\";\\nimport { CiCirclePlus } from \\\"react-icons/ci\\\";\\nimport { useDispatch, useSelector } from \\\"react-redux\\\";\\nimport { AddToCart } from \\\"../features/auth/authSlice\\\";\\nimport { toast } from \\\"react-toastify\\\";\\nimport axios from \\\"axios\\\";\\nfunction ProductCard({ productData }) {\\n  const dispatch = useDispatch();\\n\\n  const { _id, name, company, price, discountPrice, productImg } = productData;\\n\\n  const user = useSelector((state) => state.\",\n            \"auth.user);\\n\\n  if (user) {\\n    var Uid = user.user._id;\\n  }\\n\\n  async function addToCart(productid, Uid) {\\n    if (user) {\\n      const response = await axios.post(\\n        `${import.meta.env.VITE_BACKEND_DOMAIN}/add-to-cart`,\\n        {\\n          productId: productid,\\n          userId: Uid,\\n        },\\n      );\\n      const productDets = response.data;\\n      dispatch(AddToCart(productDets.data.items));\\n      toast.success(\\\"Item Added to cart\\\");\\n    } else {\\n      toast.error(\\\"Not Logged in, Please l\",\n            \"og in to add items to cart\\\");\\n    }\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"relative h-[85vh] w-full\\\">\\n        <div className=\\\"backText absolute top-[45%] z-0 -translate-x-7 -translate-y-1/2 select-none overflow-hidden font-[Montserrat] text-[18rem] font-extrabold uppercase tracking-wide text-[#72748e] opacity-15\\\">\\n          <h1>{company}</h1>\\n        </div>\\n        <div className=\\\"front relative  z-10 flex h-[100%] w-full items-center justify-around font-[Poppins]\\\">\\n          <div classNam\",\n            \"e=\\\"Section-L flex h-full max-w-[30%] flex-col justify-evenly\\\">\\n            <div className=\\\"prodName px-20 text-left text-7xl font-bold text-white\\\">\\n              <h2>{name}</h2>\\n            </div>\\n            <div className=\\\"price flex gap-8 px-20 text-5xl\\\">\\n              <p className=\\\"font-bold text-[#72748e] line-through\\\">${price}</p>\\n              <p className=\\\"font-bold text-[#676eff]\\\">${discountPrice}</p>\\n            </div>\\n            <button\\n              onClick={() => addToCart(_id, Uid\",\n            \")}\\n              className=\\\"flex items-center gap-4 px-20\\\"\\n            >\\n              <div className=\\\"text-6xl text-[#676eff]\\\">\\n                <CiCirclePlus />\\n              </div>\\n              <div className=\\\"font-[Montserrat] text-lg uppercase text-white\\\">\\n                Add to Cart\\n              </div>\\n            </button>\\n            <div>\\n              <a\\n                href=\\\"#Details\\\"\\n                className=\\\"absolute bottom-1 left-1/2 -translate-x-1/2 text-8xl text-[#676eff] \\\"\\n   \",\n            \"           >\\n                <MdExpandMore className=\\\"transition-all ease-in-out hover:scale-125\\\" />\\n              </a>\\n            </div>\\n          </div>\\n\\n          <div className=\\\"Image h-[90%] w-[45%]\\\">\\n            <img\\n              src={productImg}\\n              alt=\\\"\\\"\\n              className=\\\"object-cover drop-shadow-[0_35px_35px_rgba(0,0,0,0.25)]\\\"\\n            />\\n          </div>\\n        </div>\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default ProductCard;\\n\"\n        ],\n        \"my-store/src/components/ProductDetails.jsx\": [\n            \"import React from \\\"react\\\";\\n\\nfunction ProductDetails({ details }) {\\n  const { name, productImg } = details;\\n  return (\\n    <>\\n      <div className=\\\"flex justify-between p-14 h-screen\\\">\\n        <div className=\\\"details min-w-[45vw] p-8\\\">\\n          <div className=\\\"heading text-3xl text-white font-[Poppins] uppercase \\\">\\n            <h1>{name}</h1>\\n            <hr className=\\\"mt-7 border-t-4 rounded border-[#72748e]\\\" />\\n          </div>\\n          <div className=\\\"content mt-10 text-[#d1d1db]\\\">\\n         \",\n            \"   <ul className=\\\"list-disc flex flex-col gap-5 text-xl\\\">\\n              <li>Ultra-lightweight design for fast and precise movements</li>\\n              <li>\\n                HERO sensor with 25,600 DPI sensitivity for exceptional accuracy\\n              </li>\\n              <li>\\n                Zero-additive PTFE feet for smooth gliding across any surface\\n              </li>\\n              <li>\\n                Ambidextrous shape with customizable side buttons for versatile\\n                use\\n       \",\n            \"       </li>\\n              <li>\\n                LIGHTSPEED wireless technology ensures lag-free performance\\n              </li>\\n              <li> 70-hour battery life for extended gaming sessions</li>\\n              <li>\\n                Mechanical button tensioning system for crisp and reliable\\n                clicks\\n              </li>\\n              <li>Onboard memory to save your preferred settings</li>\\n              <li>\\n                Sleek and minimalistic design with customizable RGB ligh\",\n            \"ting\\n                Ideal for competitive gaming and esports professionals.\\n              </li>\\n            </ul>\\n          </div>\\n        </div>\\n        <div className=\\\"image w-[35vw] flex items-center\\\">\\n          <img src={productImg} className=\\\" object-cover h-[90%] w-full\\\" />\\n        </div>\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default ProductDetails;\\n\"\n        ],\n        \"my-store/src/components/ScrollToTop.jsx\": [\n            \"import React, { useEffect } from 'react';\\nimport { useLocation } from 'react-router-dom';\\n\\nconst ScrollToTop = () => {\\n  const { pathname } = useLocation();\\n\\n  useEffect(() => {\\n    window.scrollTo(0, 0); // Scroll to the top of the page on route change\\n  }, [pathname]);\\n\\n  return null; // This component doesn't render anything in the DOM\\n};\\n\\nexport default ScrollToTop;\"\n        ],\n        \"my-store/src/components/index.js\": [\n            \"export {default as Navbar} from './Navbar'\\nexport {default as Footer} from './Footer'\\n\"\n        ],\n        \"my-store/src/features/auth/authActions.js\": [\n            \"import { createAsyncThunk } from \\\"@reduxjs/toolkit\\\";\\nimport { loginSuccess} from \\\"./authSlice\\\";\\nimport axios from \\\"axios\\\";\\n\\nconst loginUser = createAsyncThunk(\\n  \\\"auth/login\\\",\\n  async (userData, { dispatch, rejectWithValue }) => {\\n    const { username, password } = userData;\\n    try {\\n      const response = await axios.post(`${import.meta.env.VITE_BACKEND_DOMAIN}/login`, {\\n        username,\\n        password,\\n      });\\n      const user = response.data;\\n      dispatch(loginSuccess(user));\\n      re\",\n            \"turn user;\\n    } catch (error) {\\n      return rejectWithValue(error.response.data);\\n    }\\n  },\\n);\\n\\n\\n\\nexport { loginUser };\\n\"\n        ],\n        \"my-store/src/features/auth/authSlice.js\": [\n            \"import { createSlice } from \\\"@reduxjs/toolkit\\\";\\n\\nconst authSlice = createSlice({\\n  name: \\\"auth\\\",\\n  initialState: {\\n    isAuthenticated: false,\\n    user: null,\\n    cart: {\\n      items: [],\\n      totalPrice: 0,\\n    },\\n  },\\n  reducers: {\\n    loginSuccess(state, action) {\\n      state.isAuthenticated = true;\\n      state.user = action.payload;\\n      state.cart = action.payload.user.cart;\\n    },\\n    logoutSuccess(state) {\\n      state.isAuthenticated = false;\\n      state.user = null;\\n      state.cart = \",\n            \"{\\n        items: [],\\n        totalPrice: 0,\\n      };\\n    },\\n    GoogleLoginSuccess(state) {\\n      state.isAuthenticated = true;\\n    },\\n    AddToCart(state, action) {\\n      const productsToAdd = action.payload;\\n      productsToAdd.forEach(({ product, quantity }) => {\\n        const existingItemIndex = state.cart.items.findIndex(\\n          (item) => item.product._id === product._id,\\n        );\\n\\n        if (existingItemIndex !== -1) {\\n          state.cart.items[existingItemIndex].quantity += 1;\\n    \",\n            \"    } else {\\n          state.cart.items.push({ product, quantity });\\n        }\\n\\n        state.cart.totalPrice = state.cart.items.reduce((total, item) => {\\n          return total + item.product.discountPrice * item.quantity;\\n        }, 0);\\n      });\\n    },\\n\\n    RemoveFromCart(state, action) {\\n      const productToRemoveId = action.payload;\\n      const productIndex = state.cart.items.findIndex(\\n        (item) => item.product == productToRemoveId,\\n      );\\n\\n      state.cart.items = state.cart.items\",\n            \".filter(\\n        (item) => item.product !== productToRemoveId,\\n      );\\n    },\\n\\n    increaseQuantity(state, action) {\\n      const itemId = action.payload;\\n      const itemIndex = state.cart.items.findIndex(\\n        (item) => item._id == itemId,\\n      );\\n\\n      state.cart.items[itemIndex].quantity += 1;\\n\\n      state.cart.totalPrice = state.cart.items.reduce((total, item) => {\\n        return total + item.product.discountPrice * item.quantity;\\n      }, 0);\\n    },\\n\\n    decreaseQuantity(state, action\",\n            \") {\\n      const itemId = action.payload;\\n      const itemIndex = state.cart.items.findIndex(\\n        (item) => item._id == itemId,\\n      );\\n\\n      state.cart.items[itemIndex].quantity -= 1;\\n\\n      state.cart.totalPrice = state.cart.items.reduce((total, item) => {\\n        return total + item.product.discountPrice * item.quantity;\\n      }, 0);\\n    },\\n  },\\n});\\n\\nexport const {\\n  loginSuccess,\\n  logoutSuccess,\\n  GoogleLoginSuccess,\\n  AddToCart,\\n  RemoveFromCart,\\n  increaseQuantity,\\n  decreaseQuantity\",\n            \",\\n} = authSlice.actions;\\nexport default authSlice.reducer;\\n\"\n        ],\n        \"my-store/src/index.css\": [\n            \"@import \\\"tailwindcss/base\\\";\\n@import \\\"tailwindcss/components\\\";\\n@import \\\"tailwindcss/utilities\\\";\\n@import url(\\\"https://fonts.googleapis.com/css2?family=Poppins&display=swap\\\");\\n/*Font family: Poppins;*/\\n@import url(\\\"https://fonts.googleapis.com/css2?family=Oswald:wght@700&display=swap\\\");\\n/*Font family: Oswald;*/\\n@import url(\\\"https://fonts.googleapis.com/css2?family=Montserrat:wght@700&display=swap\\\");\\n/*Font family: Montserrat;*/\\n\\n/*Color Pallete:\\n    #676eff(Purple)\\n    #fff(White)\\n    #72748e(Light\",\n            \" Grey)\\n    #23232f(Dark Grey BG)\\n*/\\n\\nhtml {\\n  scroll-behavior: smooth;\\n}\\n\\n/* For WebKit browsers (Chrome, Safari) */\\n::-webkit-scrollbar {\\n  width: 12px; /* Set the width of the scrollbar */\\n}\\n\\n::-webkit-scrollbar-track {\\n  background-color: #f1f1f1; /* Set the background color of the track */\\n}\\n\\n::-webkit-scrollbar-thumb {\\n  background-color: #888; /* Set the color of the thumb */\\n  border-radius: 6px; /* Round the corners of the thumb */\\n}\\n\\n::-webkit-scrollbar-thumb:hover {\\n  background-color:\",\n            \" #555; /* Change the thumb color on hover */\\n}\\n* {\\n  scrollbar-color: #888 #1d1c1c; /* Set the thumb and track colors */\\n  scrollbar-width: thin; /* Set the width of the scrollbar */\\n}\\n\\n\\nbody {\\n  scrollbar-color: #888 #171717;\\n}\\n\\n\\n\"\n        ],\n        \"my-store/src/main.jsx\": [\n            \"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom/client\\\";\\nimport App from \\\"./App\\\";\\nimport \\\"./index.css\\\";\\nimport { Provider } from \\\"react-redux\\\";\\nimport store from \\\"./store/Store\\\";\\n\\nReactDOM.createRoot(document.getElementById(\\\"root\\\")).render(\\n  <React.StrictMode>\\n    <Provider store={store}>\\n      <App />\\n    </Provider>\\n  </React.StrictMode>,\\n);\\n\"\n        ],\n        \"my-store/src/pages/CartPage.jsx\": [\n            \"import React, { useEffect, useState } from \\\"react\\\";\\nimport { useDispatch, useSelector } from \\\"react-redux\\\";\\nimport {\\n  AddToCart,\\n  RemoveFromCart,\\n  decreaseQuantity,\\n  increaseQuantity,\\n} from \\\"../features/auth/authSlice\\\";\\nimport { loadStripe } from \\\"@stripe/stripe-js\\\";\\n\\nimport { IoMdAddCircleOutline } from \\\"react-icons/io\\\";\\nimport { IoRemoveCircleOutline } from \\\"react-icons/io5\\\";\\n\\nfunction CartPage() {\\n  const dispatch = useDispatch();\\n  const Cart = useSelector((state) => state.auth.cart);\\n \",\n            \" const { items } = Cart;\\n\\n  const handleIncreaseQuantity = (id) => {\\n    dispatch(increaseQuantity(id));\\n  };\\n\\n  const handleDecreaseQuantity = (id) => {\\n    dispatch(decreaseQuantity(id));\\n  };\\n\\n  const redirectPayment = async () => {\\n    const stripe = await loadStripe(import.meta.env.VITE_STRIPE_TEST_KEY);\\n\\n    const body = {\\n      products: items,\\n    };\\n\\n    const response = await fetch(\\n      `${import.meta.env.VITE_BACKEND_DOMAIN}/create-checkout-session`,\\n      {\\n        method: \\\"POST\\\",\\n\",\n            \"        headers: {\\n          \\\"Content-type\\\": \\\"application/json\\\",\\n        },\\n        body: JSON.stringify(body),\\n      },\\n    );\\n\\n    const session = await response.json();\\n\\n    const result = stripe.redirectToCheckout({\\n      sessionId: session.id,\\n    });\\n\\n    if (result.error) {\\n      console.log(result.error);\\n    }\\n  };\\n\\n  return (\\n    <>\\n      <div className=\\\"flex min-h-screen w-full items-center justify-center bg-[#23232f]\\\">\\n        <div className=\\\"cart relative mb-20 flex min-h-[90vh] w-[\",\n            \"60vw] flex-col gap-10 rounded-lg bg-zinc-600 py-10\\\">\\n          {items.map((products) => (\\n            <div\\n              key={products._id}\\n              className=\\\"prod relative min-h-[30%] w-full bg-zinc-500\\\"\\n            >\\n              <div className=\\\"backtxt  absolute font-[Montserrat] text-8xl uppercase tracking-tight text-zinc-600\\\">\\n                {products.product.company}\\n              </div>\\n              <div className=\\\"front relative flex h-full w-full items-center justify-between\\\">\\n\",\n            \"                <div className=\\\"flex items-center\\\">\\n                  <img\\n                    src={`${products.product.productImg}`}\\n                    className=\\\"max-w-22 h-20 object-cover\\\"\\n                  />\\n                  <div>\\n                    <h1 className=\\\"font-[Poppins] text-3xl font-extrabold tracking-wider text-white\\\">\\n                      {products.product.name}\\n                    </h1>\\n                    <div className=\\\"flex gap-2 font-[Poppins]\\\">\\n                      <h\",\n            \"4 className=\\\"font-light line-through \\\">\\n                        ${products.product.price}\\n                      </h4>\\n                      <h4 className=\\\"font-bold\\\">\\n                        ${products.product.discountPrice}\\n                      </h4>\\n                    </div>\\n                  </div>\\n                </div>\\n                <div className=\\\"btns flex items-center gap-8 pr-10 text-xl\\\">\\n                  <div className=\\\"transition-all ease-in-out hover:scale-125\\\">\\n                \",\n            \"    <IoMdAddCircleOutline\\n                      onClick={() => handleIncreaseQuantity(products._id)}\\n                    />\\n                  </div>\\n                  <h1>{products.quantity}</h1>\\n                  <div className=\\\"transition-all ease-in-out hover:scale-125\\\">\\n                    <IoRemoveCircleOutline\\n                      onClick={() => handleDecreaseQuantity(products._id)}\\n                    />\\n                  </div>\\n                </div>\\n              </div>\\n            </d\",\n            \"iv>\\n          ))}\\n\\n          <div className=\\\" total absolute bottom-0 mt-10 flex h-20 w-full items-center justify-around border-t-2 font-[Montserrat] text-3xl font-bold uppercase \\\">\\n            <h1>Your cart total = ${Cart.totalPrice}/- </h1>\\n            <div>\\n              <button\\n                className=\\\"w-[110%] rounded-full bg-[#676eff]\\\"\\n                onClick={redirectPayment}\\n              >\\n                Proceed to checkout\\n              </button>\\n            </div>\\n          </div>\\n\",\n            \"        </div>\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default CartPage;\\n\\n/*\\nUsing state management, implement the add and remove cart methods and manipulate the quantity from the user state action payload\\n\\n*/\\n\"\n        ],\n        \"my-store/src/pages/CategoryPage.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { useParams } from \\\"react-router\\\";\\nimport CatProductCard from \\\"../components/CatProductCard\\\";\\n\\nconst CategoryPage = () => {\\n  const { category } = useParams();\\n\\n  return (\\n    <>\\n      <div className=\\\"relative h-screen w-full overflow-hidden bg-[#23232f]\\\">\\n        <div className=\\\"backTxt absolute top-[45%] z-0 -translate-x-7 -translate-y-1/2 select-none overflow-hidden font-[Montserrat] text-[18rem] font-extrabold uppercase tracking-wide text-[#72748e] opacity-1\",\n            \"5\\\">\\n          <h1>{category}</h1>\\n        </div>\\n        <div className=\\\"card relative z-10 flex h-full w-full justify-center items-center  flex-shrink text-white\\\">\\n          <CatProductCard category={category} />\\n          <CatProductCard category={category} />\\n          <CatProductCard category={category} />\\n          <CatProductCard category={category} />\\n        </div>\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default CategoryPage;\\n\"\n        ],\n        \"my-store/src/pages/FailedPage.jsx\": [\n            \"import React from \\\"react\\\";\\nimport PaymentFailCard from \\\"../components/PaymentFailCard\\\";\\nfunction FailedPage() {\\n  return (\\n    <>\\n      <div className=\\\"-mt-[15vh] flex h-screen w-full  items-center justify-center gap-10 bg-[#23232f]\\\">\\n        <PaymentFailCard />\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default FailedPage;\\n\\n\"\n        ],\n        \"my-store/src/pages/Home.jsx\": [\n            \"import React, { useEffect, useState } from \\\"react\\\";\\nimport HeroProduct from \\\"../components/HeroProduct\\\";\\nimport CategoriesCard from \\\"../components/CategoriesCard\\\";\\nimport Featured from \\\"../components/Featured\\\";\\nimport axios from \\\"axios\\\";\\nimport { ToastContainer } from \\\"react-toastify\\\";\\nimport \\\"react-toastify/dist/ReactToastify.css\\\";\\nimport PageLoader from \\\"./PageLoader\\\";\\nimport MobileLoader from \\\"../components/MobileLoader\\\";\\n\\nconst Home = () => {\\n    const [cardData, setCardData] = useState([{}]\",\n            \");\\n    const [featuredCards, setFeaturedCards] = useState([{}]);\\n\\n    useEffect(() => {\\n        async function fetchData() {\\n            try {\\n                const [heroResponse, featuredResponse] = await Promise.all([\\n                    axios.get(`${import.meta.env.VITE_BACKEND_DOMAIN}/HeroProducts`),\\n                    axios.get(`${import.meta.env.VITE_BACKEND_DOMAIN}/Products`),\\n                ]);\\n                setCardData(heroResponse.data);\\n                setFeaturedCards(featuredRes\",\n            \"ponse.data);\\n            } catch (error) {\\n                console.log(\\\"Error occurred while fetching data:\\\", error);\\n            }\\n        }\\n        fetchData();\\n    }, []);\\n\\n    return (\\n        <>\\n            <div className=\\\"sm:block lg:hidden\\\">\\n                <MobileLoader />\\n            </div>\\n            <div className=\\\"overflow-x-hidden hidden sm:block\\\">\\n                <PageLoader text={'GEARUP'} />\\n                <div className=\\\"lg:block\\\">\\n                    <div className=\\\"h-screen \",\n            \"w-full bg-[#23232f]\\\">\\n                        <HeroProduct cards={cardData} />\\n                    </div>\\n                    <div className=\\\"min-h-screen w-full overflow-hidden bg-[#23232f] pb-40\\\">\\n                        <h1 className=\\\"w-full py-10 text-center font-[Poppins] text-5xl text-white\\\">\\n                            Categories\\n                        </h1>\\n                        <div className=\\\"flex h-screen w-[100vw] flex-wrap\\\">\\n                            <CategoriesCard\\n           \",\n            \"                     image=\\\"/Keyboard.png\\\"\\n                                category=\\\"Keyboard\\\"\\n                                price=\\\"49\\\"\\n                            />\\n                            <CategoriesCard image=\\\"/Mouse.png\\\" category=\\\"Mouse\\\" price=\\\"29\\\" />\\n                            <CategoriesCard\\n                                image=\\\"/Headset.png\\\"\\n                                category=\\\"Headset\\\"\\n                                price=\\\"22\\\"\\n                            />\\n               \",\n            \"             <CategoriesCard\\n                                image=\\\"/Headset.png\\\"\\n                                category=\\\"Headset\\\"\\n                                price=\\\"22\\\"\\n                            />\\n                        </div>\\n                    </div>\\n                    <div className=\\\"Page3 min-h-screen w-full overflow-hidden bg-[#23232f] py-10\\\">\\n                        <div className=\\\"heading px-14 font-[Poppins] text-5xl font-bold text-white\\\">\\n                            <h1 cla\",\n            \"ssName=\\\"-mb-14\\\">Featured</h1>\\n                        </div>\\n                        <Featured featuredCards={featuredCards} />\\n                        <ToastContainer />\\n                    </div>\\n                </div>\\n            </div>\\n        </>\\n    );\\n};\\n\\nexport default Home;\\n\"\n        ],\n        \"my-store/src/pages/LoginPage.jsx\": [\n            \"import React from \\\"react\\\";\\nimport { useState } from \\\"react\\\";\\nimport { Link } from \\\"react-router-dom\\\";\\nimport { useNavigate } from \\\"react-router-dom\\\";\\nimport { useDispatch } from \\\"react-redux\\\";\\nimport { loginUser } from \\\"../features/auth/authActions\\\";\\n// import { GoogleLoginSuccess } from \\\"../features/auth/authSlice\\\";\\nimport { toast } from \\\"react-toastify\\\";\\nimport { useGSAP } from \\\"@gsap/react\\\";\\nimport gsap from \\\"gsap\\\";\\n\\nexport default function LoginPage() {\\n  useGSAP(() => {\\n    gsap.from(\\\".Form\",\n            \"Card\\\", {\\n      opacity: 0,\\n      y: 100,\\n      delay: 0.8,\\n      duration: 1,\\n    });\\n    gsap.from(\\\".backText\\\", {\\n      y: -100,\\n      opacity: 0,\\n      duration: 0.5,\\n    });\\n  });\\n  const navigateTo = useNavigate();\\n  const dispatch = useDispatch();\\n\\n  const [username, setusername] = useState(\\\"\\\");\\n  const [password, setpassword] = useState(\\\"\\\");\\n\\n  const handleLogin = async (e) => {\\n    e.preventDefault();\\n    try {\\n      dispatch(loginUser({ username, password }));\\n      navigateTo(\\\"/\\\");\\n    \",\n            \"} catch (error) {\\n      toast.error(\\\"Login failed, please try again\\\");\\n    }\\n  };\\n  return (\\n    <>\\n      <div className=\\\"relative  h-screen w-full bg-[#23232f]\\\">\\n        <div className=\\\" absolute left-1/2 top-1/2 z-0 h-auto w-full -translate-x-1/2 -translate-y-1/2  \\\">\\n          <h1 className=\\\"backText text-center font-[Montserrat] text-[30vh] uppercase tracking-widest text-[#72748e]\\\">\\n            Login\\n          </h1>\\n        </div>\\n        <div className=\\\"relative z-10 flex h-screen w-full ite\",\n            \"ms-center justify-center\\\">\\n          <div className=\\\"FormCard flex  w-[35vw] items-center  rounded-2xl border-2 p-10 backdrop-blur-lg\\\">\\n            <form\\n              onSubmit={handleLogin}\\n              className=\\\"flex h-full w-full flex-col items-center justify-center gap-4\\\"\\n            >\\n              <h1 className=\\\" font-[Poppins] text-4xl font-extrabold text-white\\\">\\n                Login\\n              </h1>\\n              <div className=\\\"flex w-full flex-col gap-2\\\">\\n                <label\\n \",\n            \"                 htmlFor=\\\"username\\\"\\n                  className=\\\"font-[Poppins] text-xl text-white\\\"\\n                >\\n                  Username\\n                </label>\\n                <input\\n                  type=\\\"text\\\"\\n                  name=\\\"Username\\\"\\n                  value={username}\\n                  onChange={(e) => setusername(e.target.value)}\\n                  className=\\\"block w-full rounded-lg border bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676ef\",\n            \"f]\\\"\\n                  placeholder=\\\"Enter your username\\\"\\n                />\\n              </div>\\n              <div className=\\\"flex w-full flex-col gap-2\\\">\\n                <label\\n                  htmlFor=\\\"password\\\"\\n                  className=\\\"font-[Poppins] text-xl text-white\\\"\\n                >\\n                  Password\\n                </label>\\n                <input\\n                  type=\\\"password\\\"\\n                  name=\\\"Password\\\"\\n                  value={password}\\n                  onChang\",\n            \"e={(e) => setpassword(e.target.value)}\\n                  placeholder=\\\"Enter your password\\\"\\n                  className=\\\"block w-full rounded-lg border bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676eff]\\\"\\n                />\\n              </div>\\n              <div className=\\\"flex w-full items-center justify-between\\\">\\n                <div className=\\\"flex gap-2 text-xl text-[#72748e]\\\">\\n                  <h3>New Here??</h3>\\n                  <Link\\n                  \",\n            \"  to=\\\"/Register\\\"\\n                    className=\\\"text-[#676eff] hover:text-[#313690]\\\"\\n                  >\\n                    Create Account\\n                  </Link>\\n                </div>\\n                <button className=\\\"rounded-lg px-3 py-1 bg-[#676eff] font-[Poppins] text-2xl font-bold\\\">\\n                  Login\\n                </button>\\n              </div>\\n            </form>\\n          </div>\\n        </div>\\n      </div>\\n    </>\\n  );\\n}\\n\\n/*\\n\\n*/\\n\"\n        ],\n        \"my-store/src/pages/PageLoader.jsx\": [\n            \"import React, { useEffect } from \\\"react\\\";\\nimport gsap from \\\"gsap\\\";\\n\\nconst PageLoader = ({ text }) => {\\n    useEffect(() => {\\n        gsap.fromTo(\\n            \\\".even\\\",\\n            { y: 1000 },\\n            { y: 0, duration: 1, stagger: 0.2, ease: \\\"power1\\\" }\\n        );\\n        gsap.fromTo(\\n            \\\".odd\\\",\\n            { y: -1000 },\\n            { y: 0, duration: 1, stagger: 0.2, ease: \\\"power1\\\" }\\n        );\\n\\n        gsap.to(\\\".wrapper\\\", {\\n            y: \\\"-100%\\\",\\n            ease: \\\"power1.inOut\\\",\\n  \",\n            \"          delay: 1,\\n        });\\n    }, []);\\n\\n    const renderText = () => {\\n        return text.split(\\\"\\\").map((char, index) => (\\n            <div\\n                key={index}\\n                className={`${index % 2 === 0 ? \\\"even\\\" : \\\"odd\\\"} -space-y-8 leading-none`}\\n            >\\n                {Array(5)\\n                    .fill(char)\\n                    .map((c, i) => (\\n                        <h1 key={i}>{c}</h1>\\n                    ))}\\n            </div>\\n        ));\\n    };\\n\\n    return (\\n      \",\n            \"  <div className=\\\"wrapper z-50 absolute left-0 top-0 flex h-screen w-full items-center justify-center bg-zinc-900 text-[10rem] font-bold text-white\\\">\\n            <div className=\\\"flex h-[8.1rem] w-full items-center justify-center overflow-hidden text-center\\\">\\n                {renderText()}\\n            </div>\\n        </div>\\n    );\\n};\\n\\nexport default PageLoader;\\n\"\n        ],\n        \"my-store/src/pages/ProductPage.jsx\": [\n            \"import React, { useEffect, useState } from \\\"react\\\";\\nimport { useParams } from \\\"react-router-dom\\\";\\nimport axios from \\\"axios\\\";\\nimport ProductCard from \\\"../components/ProductCard\\\";\\nimport ProductDetails from \\\"../components/ProductDetails\\\";\\nimport { ToastContainer } from \\\"react-toastify\\\";\\n\\nfunction ProductPage() {\\n  const [product, setproduct] = useState([{}]);\\n  const { id } = useParams();\\n  useEffect(() => {\\n    async function fetchProduct() {\\n      const response = await axios.get(`${import.meta.\",\n            \"env.VITE_BACKEND_DOMAIN}/product/${id}`);\\n      setproduct(response.data);\\n    }\\n    fetchProduct();\\n  }, []);\\n\\n  return (\\n    <>\\n      <div className=\\\"w-full overflow-hidden bg-[#23232f]\\\">\\n        <ProductCard productData={product} />\\n      </div>\\n      <div\\n        id=\\\"Details\\\"\\n        className=\\\"dets h-screen w-full overflow-hidden bg-[#23232f]\\\"\\n      >\\n        <ProductDetails details={product} />\\n        <ToastContainer />\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default ProductPage;\\n\"\n        ],\n        \"my-store/src/pages/RegisterPage.jsx\": [\n            \"import axios from \\\"axios\\\";\\nimport React, { useState } from \\\"react\\\";\\nimport { useNavigate } from \\\"react-router-dom\\\";\\nimport { Link } from \\\"react-router-dom\\\";\\nimport { toast } from \\\"react-toastify\\\";\\nimport { useDispatch } from \\\"react-redux\\\";\\nimport { loginSuccess } from \\\"../features/auth/authSlice\\\";\\nimport gsap from \\\"gsap\\\";\\nimport { useGSAP } from \\\"@gsap/react\\\";\\n\\nfunction RegisterPage() {\\n  useGSAP(() => {\\n    gsap.from(\\\".FormCard\\\", {\\n      opacity: 0,\\n      y: 100,\\n      delay: 0.8,\\n      duratio\",\n            \"n: 1,\\n    });\\n    gsap.from(\\\".backText\\\", {\\n      y: -100,\\n      opacity: 0,\\n      duration: 0.5,\\n    });\\n  });\\n\\n  const navigateTo = useNavigate();\\n  const dispatch = useDispatch();\\n\\n  const [username, setusername] = useState(\\\"\\\");\\n  const [name, setname] = useState(\\\"\\\");\\n  const [email, setemail] = useState(\\\"\\\");\\n  const [password, setpassword] = useState(\\\"\\\");\\n\\n  const register = async (e) => {\\n    e.preventDefault();\\n\\n    try {\\n      const response = await axios.post(\\n        `${import.meta.env.V\",\n            \"ITE_BACKEND_DOMAIN}/register`,\\n        {\\n          username,\\n          name,\\n          email,\\n          password,\\n        },\\n      );\\n\\n      if (response.status === 200) {\\n        dispatch(loginSuccess(response.data));\\n        navigateTo(\\\"/\\\");\\n      } else if (response.status === 201) {\\n        navigateTo(\\\"/Login\\\");\\n        toast.info(\\\"User Already exists, please login\\\");\\n      } else {\\n        toast.error(\\\"Something went wrong, please try again\\\");\\n      }\\n    } catch (error) {\\n      console.err\",\n            \"or(\\\"Error:\\\", error);\\n    }\\n  };\\n  return (\\n    <>\\n      <div className=\\\"relative  h-screen w-full bg-[#23232f]\\\">\\n        <div className=\\\"absolute left-1/2 top-1/2 z-0 w-full -translate-x-1/2 -translate-y-1/2 \\\">\\n          <h1 className=\\\"backText text-center font-[Montserrat] text-[30vh] uppercase tracking-wide text-[#72748e]\\\">\\n            Register\\n          </h1>\\n        </div>\\n        <div className=\\\"relative z-10 flex h-screen w-full items-center justify-center\\\">\\n          <div className=\\\"FormC\",\n            \"ard flex  w-[35vw] items-center rounded-2xl border-2 p-10 backdrop-blur-lg \\\">\\n            <form\\n              onSubmit={register}\\n              className=\\\"flex h-full w-full flex-col items-center justify-center gap-4\\\"\\n            >\\n              <h1 className=\\\"font-[Poppins] text-4xl font-extrabold text-white\\\">\\n                Create an Account\\n              </h1>\\n\\n              <div className=\\\"flex w-full flex-col gap-2\\\">\\n                <label\\n                  htmlFor=\\\"username\\\"\\n             \",\n            \"     className=\\\"font-[Poppins] text-xl text-white\\\"\\n                >\\n                  Username\\n                </label>\\n                <input\\n                  type=\\\"text\\\"\\n                  name=\\\"Username\\\"\\n                  value={username}\\n                  onChange={(e) => setusername(e.target.value)}\\n                  className=\\\"block w-full rounded-lg border bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676eff]\\\"\\n                  placeholder=\\\"Enter your use\",\n            \"rname\\\"\\n                />\\n              </div>\\n              {/* Name */}\\n              <div className=\\\"flex w-full flex-col gap-2\\\">\\n                <label\\n                  htmlFor=\\\"name\\\"\\n                  className=\\\"font-[Poppins] text-xl text-white\\\"\\n                >\\n                  Name\\n                </label>\\n\\n                <input\\n                  type=\\\"text\\\"\\n                  name=\\\"Name\\\"\\n                  value={name}\\n                  onChange={(e) => setname(e.target.value)}\\n      \",\n            \"            placeholder=\\\"Enter your name\\\"\\n                  className=\\\"block w-full rounded-lg border bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676eff]\\\"\\n                />\\n              </div>\\n              {/* email */}\\n              <div className=\\\"flex w-full flex-col gap-2\\\">\\n                <label\\n                  htmlFor=\\\"name\\\"\\n                  className=\\\"font-[Poppins] text-xl text-white\\\"\\n                >\\n                  Email\\n                </lab\",\n            \"el>\\n\\n                <input\\n                  type=\\\"text\\\"\\n                  name=\\\"Email\\\"\\n                  value={email}\\n                  onChange={(e) => setemail(e.target.value)}\\n                  placeholder=\\\"Enter your email\\\"\\n                  className=\\\"block w-full rounded-lg border bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676eff]\\\"\\n                />\\n              </div>\\n              {/* password */}\\n              <div className=\\\"flex w-full flex-col\",\n            \" gap-2\\\">\\n                <label\\n                  htmlFor=\\\"name\\\"\\n                  className=\\\"font-[Poppins] text-xl text-white\\\"\\n                >\\n                  Password\\n                </label>\\n\\n                <input\\n                  type=\\\"password\\\"\\n                  name=\\\"Password\\\"\\n                  value={password}\\n                  onChange={(e) => setpassword(e.target.value)}\\n                  placeholder=\\\"Enter your password\\\"\\n                  className=\\\"block w-full rounded-lg borde\",\n            \"r bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676eff]\\\"\\n                />\\n              </div>\\n\\n              <div className=\\\"flex items-center justify-between gap-2 w-full\\\">\\n                <div className=\\\"flex gap-2 text-xl text-[#72748e]\\\">\\n                  <h3>Have an account already??</h3>\\n                  <Link\\n                    to=\\\"/Login\\\"\\n                    className=\\\"text-[#676eff] hover:text-[#313690]\\\"\\n                  >\\n                    Log I\",\n            \"n\\n                  </Link>\\n                </div>\\n                <button className=\\\"self-end rounded-lg bg-[#676eff] px-3 py-1 font-[Poppins]  text-2xl\\\">\\n                  Register\\n                </button>\\n              </div>\\n            </form>\\n          </div>\\n        </div>\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default RegisterPage;\\n\"\n        ],\n        \"my-store/src/pages/SuccessPage.jsx\": [\n            \"import React from \\\"react\\\";\\nimport PaymentSuccessCard from \\\"../components/PaymentSuccessCard\\\";\\n\\nfunction SuccessPage() {\\n  return (\\n    <>\\n      <div className=\\\"-mt-[15vh] flex h-screen w-full  items-center justify-center gap-10 bg-[#23232f]\\\">\\n        <PaymentSuccessCard />\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default SuccessPage;\\n\"\n        ],\n        \"my-store/src/pages/failure.jsx\": [\n            \"import React from 'react'\\n\\nfunction failure() {\\n  return (\\n    <div>It seems you're not logged in!!</div>\\n  )\\n}\\n\\nexport default failure\"\n        ],\n        \"my-store/src/pages/index.js\": [\n            \"export { default as ProductPage } from \\\"./ProductPage\\\";\\nexport { default as LoginPage } from \\\"./LoginPage\\\";\\nexport { default as RegisterPage } from \\\"./RegisterPage\\\";\\nexport { default as Home } from \\\"./Home\\\";\\nexport { default as CategoryPage } from \\\"./CategoryPage\\\";\\nexport { default as CartPage } from \\\"./CartPage\\\";\\nexport { default as FailedPage } from \\\"./FailedPage\\\";\\nexport { default as SuccessPage } from \\\"./SuccessPage\\\";\\n\"\n        ],\n        \"my-store/src/store/Store.js\": [\n            \"import { configureStore } from \\\"@reduxjs/toolkit\\\";\\nimport authReducer from \\\"../features/auth/authSlice\\\";\\n\\nconst store = configureStore({\\n  reducer: {\\n    auth: authReducer\\n  },\\n});\\n\\nexport default store;\\n\"\n        ],\n        \"my-store/tailwind.config.js\": [\n            \"// /** @type {import('tailwindcss').Config} */\\nconst flowbite = require(\\\"flowbite-react/tailwind\\\");\\nexport default {\\n  content: [\\\"./index.html\\\", \\\"./src/**/*.{js,jsx}\\\", flowbite.content()],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [flowbite.plugin()],\\n};\\n\"\n        ],\n        \"my-store/vercel.json\": [\n            \"{\\n  \\\"rewrites\\\": [\\n    { \\\"source\\\": \\\"/(.*)\\\", \\\"destination\\\": \\\"/\\\" }\\n  ]\\n}\\n\"\n        ],\n        \"my-store/vite.config.js\": [\n            \"import { defineConfig } from 'vite'\\nimport react from '@vitejs/plugin-react'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n})\\n\"\n        ]\n    },\n    \"message\": \"Success\"\n}"),
			},
		},
		{
			Role: "model",
			Parts: []genai.Part{
				genai.Text("### Documentation:\n\n- **Route**: POST /register\n- **Response**:\n```json\n{\n    \"user\": {\n        \"name\": \"string\",\n        \"username\": \"string\",\n        \"email\": \"string\",\n        \"password\": \"string\",\n        \"pfp\": \"string\",\n        \"googleID\": \"string\",\n        \"googleName\": \"string\",\n          \"address\": {\n            \"street\": \"string\",\n             \"city\": \"string\",\n              \"state\": \"string\",\n             \"pinCode\": \"string\",\n            \"country\": \"string\"\n        },\n        \"role\": \"customer\",\n        \"cart\": {\n          \"items\": [],\n            \"totalPrice\": 0\n            },\n            \"createdAt\": \"date\"\n    }\n}\n```\nStatus Code: 200\n```json\n{\n \"ExistingUser\":{\n        \"name\": \"string\",\n        \"username\": \"string\",\n        \"email\": \"string\",\n        \"password\": \"string\",\n        \"pfp\": \"string\",\n        \"googleID\": \"string\",\n        \"googleName\": \"string\",\n          \"address\": {\n            \"street\": \"string\",\n             \"city\": \"string\",\n              \"state\": \"string\",\n             \"pinCode\": \"string\",\n            \"country\": \"string\"\n        },\n        \"role\": \"customer\",\n        \"cart\": {\n          \"items\": [],\n            \"totalPrice\": 0\n            },\n             \"createdAt\": \"date\"\n    }\n}\n```\nStatus Code: 201\n- **Summary**: Registers a new user, if the user doesn't already exists returns the user details, if the user exists it sends a 201 status code.\n\n- **Route**: POST /login\n- **Response**:\n```json\n{\n    \"user\": {\n        \"name\": \"string\",\n        \"username\": \"string\",\n        \"email\": \"string\",\n        \"password\": \"string\",\n         \"pfp\": \"string\",\n        \"googleID\": \"string\",\n        \"googleName\": \"string\",\n          \"address\": {\n            \"street\": \"string\",\n             \"city\": \"string\",\n              \"state\": \"string\",\n             \"pinCode\": \"string\",\n            \"country\": \"string\"\n        },\n        \"role\": \"customer\",\n        \"cart\": {\n           \"items\": [{\n               \"product\":{\n                   \"_id\": \"string\",\n                   \"name\":\"string\",\n                   \"price\": 0,\n                   \"discountPrice\": 0,\n                   \"productImg\":\"string\",\n                   \"company\":\"string\",\n                   \"productDetails\": []\n               },\n               \"quantity\":0\n           }],\n            \"totalPrice\": 0\n        },\n         \"createdAt\": \"date\"\n    }\n}\n```\nStatus Code: 200\n- **Summary**: Logs in an existing user and returns the user details with cart details populated.\n\n-   **Route**: GET /HeroProducts\n-   **Response**:\n```json\n[\n    {\n        \"_id\": \"string\",\n        \"name\": \"string\",\n        \"price\": 0,\n        \"discountPrice\": 0,\n        \"productImg\": \"string\",\n        \"category\": \"string\"\n    }\n]\n```\nStatus Code: 200\n-   **Summary**: Retrieves and returns a list of all hero products.\n\n-   **Route**: GET /Products\n-   **Response**:\n```json\n[\n    {\n        \"_id\": \"string\",\n        \"name\": \"string\",\n        \"price\": 0,\n        \"discountPrice\": 0,\n        \"productImg\": \"string\",\n        \"company\":\"string\",\n         \"productDetails\": [],\n        \"totalStock\":0,\n         \"inStock\":true\n    }\n]\n```\nStatus Code: 200\n-   **Summary**: Retrieves and returns a list of all products.\n\n- **Route**: GET /product/:id\n-   **Response**:\n```json\n {\n        \"_id\": \"string\",\n        \"name\": \"string\",\n        \"price\": 0,\n        \"discountPrice\": 0,\n        \"productImg\": \"string\",\n        \"company\":\"string\",\n         \"productDetails\": [],\n        \"totalStock\":0,\n         \"inStock\":true\n    }\n```\nStatus Code: 200\n-   **Summary**: Retrieves and returns a specific product by its ID.\n\n- **Route**: POST /add-to-cart\n- **Response**:\n```json\n{\n    \"message\": \"Added To cart\",\n    \"data\": {\n        \"items\": [\n            {\n             \"product\":{\n                   \"_id\": \"string\",\n                   \"name\":\"string\",\n                   \"price\": 0,\n                   \"discountPrice\": 0,\n                   \"productImg\":\"string\",\n                   \"company\":\"string\",\n                   \"productDetails\": []\n               },\n              \"quantity\": 0\n            }\n        ],\n        \"totalPrice\": 0\n    }\n}\n```\nStatus Code: 200\n```json\n{\n    \"message\": \"Product or User not found\"\n}\n```\nStatus Code: 404\n```json\n{\n    \"message\": \"Internal server error\"\n}\n```\nStatus Code: 500\n-   **Summary**: Adds a product to the user's cart, or updates the quantity if the product is already there.\n\n- **Route**: GET /products/:category\n- **Response**:\n```json\n[\n    {\n        \"_id\": \"string\",\n        \"name\": \"string\",\n        \"price\": 0,\n        \"discountPrice\": 0,\n        \"productImg\": \"string\",\n        \"company\":\"string\",\n         \"productDetails\": [],\n        \"totalStock\":0,\n         \"inStock\":true\n    }\n]\n```\nStatus Code: 200\n-   **Summary**: Retrieves and returns a list of products filtered by the provided category.\n\n-   **Route**: POST /create-checkout-session\n-   **Response**:\n```json\n{\n  \"id\": \"string\"\n}\n```\nStatus Code: 200\n-   **Summary**: Creates a new checkout session for stripe payment.\n"),
			},
		},
	}
	resp, err := session.SendMessage(ctx, genai.Text(input))
	if err != nil {
		return nil, fmt.Errorf("Error generating response: %v", err)
	}

	for _, part := range resp.Candidates[0].Content.Parts {
		generatedResponse := part
		return generatedResponse, nil
	}

	return nil, fmt.Errorf("No response generated")
}
